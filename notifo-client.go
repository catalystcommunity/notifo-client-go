// Package notifo_client_go provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package notifo_client_go

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for ChannelCondition.
const (
	ChannelConditionAlways         ChannelCondition = "Always"
	ChannelConditionIfNotConfirmed ChannelCondition = "IfNotConfirmed"
	ChannelConditionIfNotSeen      ChannelCondition = "IfNotSeen"
	ChannelConditionInherit        ChannelCondition = "Inherit"
)

// Defines values for ChannelSend.
const (
	ChannelSendInherit    ChannelSend = "Inherit"
	ChannelSendNotAllowed ChannelSend = "NotAllowed"
	ChannelSendNotSending ChannelSend = "NotSending"
	ChannelSendSend       ChannelSend = "Send"
)

// Defines values for ConfirmMode.
const (
	ConfirmModeExplicit ConfirmMode = "Explicit"
	ConfirmModeNone     ConfirmMode = "None"
)

// Defines values for EmailPreviewType.
const (
	EmailPreviewTypeHtml EmailPreviewType = "Html"
	EmailPreviewTypeText EmailPreviewType = "Text"
)

// Defines values for EmailTemplateType.
const (
	BodyHtml EmailTemplateType = "BodyHtml"
	BodyText EmailTemplateType = "BodyText"
	General  EmailTemplateType = "General"
	Subject  EmailTemplateType = "Subject"
)

// Defines values for IntegrationStatus.
const (
	Pending            IntegrationStatus = "Pending"
	VerificationFailed IntegrationStatus = "VerificationFailed"
	Verified           IntegrationStatus = "Verified"
)

// Defines values for IsoDayOfWeek.
const (
	IsoDayOfWeekFriday    IsoDayOfWeek = "Friday"
	IsoDayOfWeekMonday    IsoDayOfWeek = "Monday"
	IsoDayOfWeekNone      IsoDayOfWeek = "None"
	IsoDayOfWeekSaturday  IsoDayOfWeek = "Saturday"
	IsoDayOfWeekSunday    IsoDayOfWeek = "Sunday"
	IsoDayOfWeekThursday  IsoDayOfWeek = "Thursday"
	IsoDayOfWeekTuesday   IsoDayOfWeek = "Tuesday"
	IsoDayOfWeekWednesday IsoDayOfWeek = "Wednesday"
)

// Defines values for MediaType.
const (
	MediaTypeAudio   MediaType = "Audio"
	MediaTypeImage   MediaType = "Image"
	MediaTypeUnknown MediaType = "Unknown"
	MediaTypeVideo   MediaType = "Video"
)

// Defines values for MobileDeviceType.
const (
	MobileDeviceTypeAndroid MobileDeviceType = "Android"
	MobileDeviceTypeIOS     MobileDeviceType = "iOS"
	MobileDeviceTypeUnknown MobileDeviceType = "Unknown"
)

// Defines values for ProcessStatus.
const (
	Attempt ProcessStatus = "Attempt"
	Failed  ProcessStatus = "Failed"
	Handled ProcessStatus = "Handled"
	None    ProcessStatus = "None"
	Skipped ProcessStatus = "Skipped"
)

// Defines values for PropertyType.
const (
	PropertyTypeBoolean       PropertyType = "Boolean"
	PropertyTypeMultilineText PropertyType = "MultilineText"
	PropertyTypeNumber        PropertyType = "Number"
	PropertyTypePassword      PropertyType = "Password"
	PropertyTypeText          PropertyType = "Text"
)

// Defines values for ResizeMode.
const (
	BoxPad     ResizeMode = "BoxPad"
	Crop       ResizeMode = "Crop"
	CropUpsize ResizeMode = "CropUpsize"
	Max        ResizeMode = "Max"
	Min        ResizeMode = "Min"
	Pad        ResizeMode = "Pad"
	Stretch    ResizeMode = "Stretch"
)

// Defines values for SchedulingType.
const (
	UTC      SchedulingType = "UTC"
	UserTime SchedulingType = "UserTime"
)

// Defines values for TopicChannel.
const (
	Allowed    TopicChannel = "Allowed"
	NotAllowed TopicChannel = "NotAllowed"
)

// Defines values for TopicQueryScope.
const (
	All      TopicQueryScope = "All"
	Explicit TopicQueryScope = "Explicit"
	Implicit TopicQueryScope = "Implicit"
)

// AddAllowedTopicDto defines model for AddAllowedTopicDto.
type AddAllowedTopicDto struct {
	// Prefix The topic to add.
	Prefix string `json:"prefix"`
}

// AddContributorDto defines model for AddContributorDto.
type AddContributorDto struct {
	// Email The email of the new contributor.
	Email string `json:"email"`

	// Role The role.
	Role *string `json:"role"`
}

// AdminProfileDto defines model for AdminProfileDto.
type AdminProfileDto struct {
	// Token The token for the integrated app.
	Token *string `json:"token"`
}

// AppContributorDto defines model for AppContributorDto.
type AppContributorDto struct {
	// Role The role.
	Role string `json:"role"`

	// UserId The id of the user.
	UserId string `json:"userId"`

	// UserName The name of the user.
	UserName string `json:"userName"`
}

// AppDetailsDto defines model for AppDetailsDto.
type AppDetailsDto struct {
	// ApiKeys The api keys.
	ApiKeys map[string]string `json:"apiKeys"`

	// ConfirmUrl The confirm URL.
	ConfirmUrl *string `json:"confirmUrl"`

	// Contributors The contributors.
	Contributors []AppContributorDto `json:"contributors"`

	// Counters The statistics counters.
	Counters map[string]int64 `json:"counters"`

	// Created The date time (ISO 8601) when the app has been created.
	Created time.Time `json:"created"`

	// Id The id of the app.
	Id string `json:"id"`

	// Languages The supported languages.
	Languages []string `json:"languages"`

	// LastUpdate The date time (ISO 8601) when the app has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Name The app name.
	Name string `json:"name"`

	// Role The current role.
	Role string `json:"role"`
}

// AppDto defines model for AppDto.
type AppDto struct {
	// ApiKeys The api keys.
	ApiKeys map[string]string `json:"apiKeys"`

	// Counters The statistics counters.
	Counters map[string]int64 `json:"counters"`

	// Created The date time (ISO 8601) when the app has been created.
	Created time.Time `json:"created"`

	// Id The id of the app.
	Id string `json:"id"`

	// Languages The supported languages.
	Languages []string `json:"languages"`

	// LastUpdate The date time (ISO 8601) when the app has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Name The app name.
	Name string `json:"name"`

	// Role The current role.
	Role string `json:"role"`
}

// ChannelCondition defines model for ChannelCondition.
type ChannelCondition string

// ChannelSend defines model for ChannelSend.
type ChannelSend string

// ChannelSendInfoDto defines model for ChannelSendInfoDto.
type ChannelSendInfoDto struct {
	Configuration *SendConfiguration `json:"configuration,omitempty"`

	// Detail The details.
	Detail *string `json:"detail"`

	// FirstConfirmed The first time the notification has been marked as confirmed for this identifier.
	FirstConfirmed *time.Time `json:"firstConfirmed"`

	// FirstDelivered The first time the notification has been marked as delivered for this identifier.
	FirstDelivered *time.Time `json:"firstDelivered"`

	// FirstSeen The first time the notification has been marked as seen for this identifier.
	FirstSeen *time.Time `json:"firstSeen"`

	// LastUpdate The last update.
	LastUpdate *time.Time     `json:"lastUpdate,omitempty"`
	Status     *ProcessStatus `json:"status,omitempty"`
}

// ChannelSettingDto defines model for ChannelSettingDto.
type ChannelSettingDto struct {
	Condition ChannelCondition `json:"condition"`

	// DelayInSeconds The delay in seconds.
	DelayInSeconds *int32                  `json:"delayInSeconds"`
	Properties     *NotificationProperties `json:"properties,omitempty"`
	Send           ChannelSend             `json:"send"`

	// Template The template if the channel supports it.
	Template *string `json:"template"`
}

// ChannelTemplateDetailsDtoOfEmailTemplateDto defines model for ChannelTemplateDetailsDtoOfEmailTemplateDto.
type ChannelTemplateDetailsDtoOfEmailTemplateDto struct {
	// Created The date time (ISO 8601) when the template has been created.
	Created time.Time `json:"created"`

	// Id The id of the template.
	Id string `json:"id"`

	// Languages The language specific templates.
	Languages map[string]EmailTemplateDto `json:"languages"`

	// LastUpdate The date time (ISO 8601) when the template has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Name The optional name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary bool `json:"primary"`
}

// ChannelTemplateDetailsDtoOfMessagingTemplateDto defines model for ChannelTemplateDetailsDtoOfMessagingTemplateDto.
type ChannelTemplateDetailsDtoOfMessagingTemplateDto struct {
	// Created The date time (ISO 8601) when the template has been created.
	Created time.Time `json:"created"`

	// Id The id of the template.
	Id string `json:"id"`

	// Languages The language specific templates.
	Languages map[string]MessagingTemplateDto `json:"languages"`

	// LastUpdate The date time (ISO 8601) when the template has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Name The optional name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary bool `json:"primary"`
}

// ChannelTemplateDetailsDtoOfSmsTemplateDto defines model for ChannelTemplateDetailsDtoOfSmsTemplateDto.
type ChannelTemplateDetailsDtoOfSmsTemplateDto struct {
	// Created The date time (ISO 8601) when the template has been created.
	Created time.Time `json:"created"`

	// Id The id of the template.
	Id string `json:"id"`

	// Languages The language specific templates.
	Languages map[string]SmsTemplateDto `json:"languages"`

	// LastUpdate The date time (ISO 8601) when the template has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Name The optional name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary bool `json:"primary"`
}

// ChannelTemplateDto defines model for ChannelTemplateDto.
type ChannelTemplateDto struct {
	// Id The id of the template.
	Id string `json:"id"`

	// Kind The kind of the template.
	Kind *string `json:"kind"`

	// LastUpdate The last time the template has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Name The optional name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary bool `json:"primary"`
}

// ConfiguredIntegrationDto defines model for ConfiguredIntegrationDto.
type ConfiguredIntegrationDto struct {
	// Condition The javascript condition.
	Condition *string `json:"condition"`

	// Enabled True when enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Priority The priority in which order the integrations must run.
	Priority *int32 `json:"priority,omitempty"`

	// Properties The configured properties.
	Properties map[string]string `json:"properties"`
	Status     IntegrationStatus `json:"status"`

	// Test True or false when only used for test or production mode.
	Test *bool `json:"test"`

	// Type The integration type.
	Type string `json:"type"`
}

// ConfiguredIntegrationsDto defines model for ConfiguredIntegrationsDto.
type ConfiguredIntegrationsDto struct {
	// Configured The configured integrations.
	Configured map[string]ConfiguredIntegrationDto `json:"configured"`

	// Supported The supported integrations.
	Supported map[string]IntegrationDefinitionDto `json:"supported"`
}

// ConfirmMode defines model for ConfirmMode.
type ConfirmMode string

// CreateChannelTemplateDto defines model for CreateChannelTemplateDto.
type CreateChannelTemplateDto struct {
	// Kind The kind of the template.
	Kind *string `json:"kind"`
}

// CreateChannelTemplateLanguageDto defines model for CreateChannelTemplateLanguageDto.
type CreateChannelTemplateLanguageDto struct {
	// Language The new language.
	Language string `json:"language"`
}

// CreateIntegrationDto defines model for CreateIntegrationDto.
type CreateIntegrationDto struct {
	// Enabled True when enabled.
	Enabled *bool `json:"enabled"`

	// Priority The priority in which order the integrations must run.
	Priority *int32 `json:"priority"`

	// Properties The configured properties.
	Properties map[string]string `json:"properties"`

	// Test True when used for test events.
	Test *bool `json:"test"`

	// Type The integration type.
	Type string `json:"type"`
}

// CreateSystemUserDto defines model for CreateSystemUserDto.
type CreateSystemUserDto struct {
	// Email The email of the user. Unique value.
	Email openapi_types.Email `json:"email"`

	// Password The password of the user.
	Password *string `json:"password"`

	// Roles Additional role for the user.
	Roles []string `json:"roles"`
}

// EmailFormattingError defines model for EmailFormattingError.
type EmailFormattingError struct {
	Column   *int32             `json:"column,omitempty"`
	Line     *int32             `json:"line,omitempty"`
	Message  *string            `json:"message,omitempty"`
	Template *EmailTemplateType `json:"template,omitempty"`
}

// EmailPreviewDto defines model for EmailPreviewDto.
type EmailPreviewDto struct {
	// Errors The errors when rendering a preview.
	Errors *[]EmailFormattingError `json:"errors"`

	// Result The rendered preview.
	Result *string `json:"result"`
}

// EmailPreviewRequestDto defines model for EmailPreviewRequestDto.
type EmailPreviewRequestDto struct {
	// Kind The kind of the template.
	Kind *string `json:"kind"`

	// Template The preview to render.
	Template string            `json:"template"`
	Type     *EmailPreviewType `json:"type,omitempty"`
}

// EmailPreviewType defines model for EmailPreviewType.
type EmailPreviewType string

// EmailTemplateDto defines model for EmailTemplateDto.
type EmailTemplateDto struct {
	// BodyHtml The body html template.
	BodyHtml string `json:"bodyHtml"`

	// BodyText The body text template.
	BodyText *string `json:"bodyText"`

	// FromEmail The optional from email.
	FromEmail *string `json:"fromEmail"`

	// FromName The optional from name.
	FromName *string `json:"fromName"`

	// Kind The type of the template.
	Kind *string `json:"kind"`

	// Subject The subject text.
	Subject string `json:"subject"`
}

// EmailTemplateType defines model for EmailTemplateType.
type EmailTemplateType string

// ErrorDto defines model for ErrorDto.
type ErrorDto struct {
	// Details Detailed error messages.
	Details *[]string `json:"details"`

	// ErrorCode The error code.
	ErrorCode *string `json:"errorCode"`

	// Message The error message.
	Message *string `json:"message"`

	// StatusCode Status code of the http response.
	StatusCode *int32 `json:"statusCode,omitempty"`

	// TraceId The optional trace id.
	TraceId *string `json:"traceId"`

	// Type The error type, usually a link.
	Type *string `json:"type"`
}

// EventDto defines model for EventDto.
type EventDto struct {
	// Counters The statistics counters.
	Counters map[string]int64 `json:"counters"`

	// Created The time when the event has been created.
	Created time.Time `json:"created"`

	// CreatorId A custom id to identity the creator.
	CreatorId *string `json:"creatorId"`

	// Data Additional user defined data.
	Data *string `json:"data"`

	// DisplayName The display name.
	DisplayName string                    `json:"displayName"`
	Formatting  NotificationFormattingDto `json:"formatting"`

	// Id The id of the event.
	Id string `json:"id"`

	// Properties User defined properties.
	Properties map[string]string `json:"properties"`
	Scheduling *SchedulingDto    `json:"scheduling,omitempty"`

	// Settings Notification settings per channel.
	Settings map[string]ChannelSettingDto `json:"settings"`

	// Silent True when silent.
	Silent bool `json:"silent"`

	// TimeToLiveInSeconds The time to live in seconds.
	TimeToLiveInSeconds *int32 `json:"timeToLiveInSeconds"`

	// Topic The topic path.
	Topic string `json:"topic"`
}

// HandledInfoDto defines model for HandledInfoDto.
type HandledInfoDto struct {
	// Channel The channel over which the notification was marked as seen or confirmed.
	Channel *string `json:"channel"`

	// Timestamp The timestamp.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// IntegrationCreatedDto defines model for IntegrationCreatedDto.
type IntegrationCreatedDto struct {
	// Id The id of the integration.
	Id          string                   `json:"id"`
	Integration ConfiguredIntegrationDto `json:"integration"`
}

// IntegrationDefinitionDto defines model for IntegrationDefinitionDto.
type IntegrationDefinitionDto struct {
	// Capabilities The features of the integration.
	Capabilities []string `json:"capabilities"`

	// Description The optional description of the integration.
	Description *string `json:"description"`

	// LogoUrl The logo URL for the integration.
	LogoUrl string `json:"logoUrl"`

	// Properties The properties to configure.
	Properties []IntegrationPropertyDto `json:"properties"`

	// Title The title of the integration.
	Title string `json:"title"`
}

// IntegrationPropertyDto defines model for IntegrationPropertyDto.
type IntegrationPropertyDto struct {
	// AllowedValues The allowed values.
	AllowedValues *[]string `json:"allowedValues"`

	// DefaultValue The default value.
	DefaultValue *interface{} `json:"defaultValue"`

	// EditorDescription The optional description.
	EditorDescription *string `json:"editorDescription"`

	// EditorLabel The optional label.
	EditorLabel *string `json:"editorLabel"`

	// IsRequired True when required.
	IsRequired *bool `json:"isRequired,omitempty"`

	// MaxLength The min length (for strings).
	MaxLength *int64 `json:"maxLength"`

	// MaxValue The max value (for numbers).
	MaxValue *int64 `json:"maxValue"`

	// MinLength The min length (for strings).
	MinLength *int64 `json:"minLength"`

	// MinValue The min value (for numbers).
	MinValue *int64 `json:"minValue"`

	// Name The field name for the property.
	Name string `json:"name"`

	// Pattern The pattern (for strings).
	Pattern *string `json:"pattern"`

	// Summary True to show this property in the summary.
	Summary *bool        `json:"summary,omitempty"`
	Type    PropertyType `json:"type"`
}

// IntegrationStatus defines model for IntegrationStatus.
type IntegrationStatus string

// IsoDayOfWeek defines model for IsoDayOfWeek.
type IsoDayOfWeek string

// ListResponseDtoOfChannelTemplateDto defines model for ListResponseDtoOfChannelTemplateDto.
type ListResponseDtoOfChannelTemplateDto struct {
	// Items The items.
	Items []ChannelTemplateDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfEventDto defines model for ListResponseDtoOfEventDto.
type ListResponseDtoOfEventDto struct {
	// Items The items.
	Items []EventDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfLogEntryDto defines model for ListResponseDtoOfLogEntryDto.
type ListResponseDtoOfLogEntryDto struct {
	// Items The items.
	Items []LogEntryDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfMediaDto defines model for ListResponseDtoOfMediaDto.
type ListResponseDtoOfMediaDto struct {
	// Items The items.
	Items []MediaDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfMobilePushTokenDto defines model for ListResponseDtoOfMobilePushTokenDto.
type ListResponseDtoOfMobilePushTokenDto struct {
	// Items The items.
	Items []MobilePushTokenDto2 `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfSubscriptionDto defines model for ListResponseDtoOfSubscriptionDto.
type ListResponseDtoOfSubscriptionDto struct {
	// Items The items.
	Items []SubscriptionDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfSystemUserDto defines model for ListResponseDtoOfSystemUserDto.
type ListResponseDtoOfSystemUserDto struct {
	// Items The items.
	Items []SystemUserDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfTemplateDto defines model for ListResponseDtoOfTemplateDto.
type ListResponseDtoOfTemplateDto struct {
	// Items The items.
	Items []TemplateDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfTopicDto defines model for ListResponseDtoOfTopicDto.
type ListResponseDtoOfTopicDto struct {
	// Items The items.
	Items []TopicDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfUserDto defines model for ListResponseDtoOfUserDto.
type ListResponseDtoOfUserDto struct {
	// Items The items.
	Items []UserDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfUserNotificationDetailsDto defines model for ListResponseDtoOfUserNotificationDetailsDto.
type ListResponseDtoOfUserNotificationDetailsDto struct {
	// Items The items.
	Items []UserNotificationDetailsDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// ListResponseDtoOfUserNotificationDto defines model for ListResponseDtoOfUserNotificationDto.
type ListResponseDtoOfUserNotificationDto struct {
	// Items The items.
	Items []UserNotificationDto `json:"items"`

	// Total The total number of items.
	Total int64 `json:"total"`
}

// LocalizedText defines model for LocalizedText.
type LocalizedText map[string]string

// LogEntryDto defines model for LogEntryDto.
type LogEntryDto struct {
	// Count The number of items the message has been seen.
	Count int64 `json:"count"`

	// FirstSeen The first time this message has been seen.
	FirstSeen time.Time `json:"firstSeen"`

	// LastSeen The last time this message has been seen.
	LastSeen time.Time `json:"lastSeen"`

	// Message The log message.
	Message string `json:"message"`
}

// MediaDto defines model for MediaDto.
type MediaDto struct {
	// Created The date time (ISO 8601) when the media has been created.
	Created time.Time `json:"created"`

	// FileInfo Generated information about the file.
	FileInfo string `json:"fileInfo"`

	// FileName The file name.
	FileName string `json:"fileName"`

	// FileSize The size of the media file.
	FileSize int64 `json:"fileSize"`

	// LastUpdate The date time (ISO 8601) when the media has been updated.
	LastUpdate time.Time     `json:"lastUpdate"`
	Metadata   MediaMetadata `json:"metadata"`

	// MimeType The mime type.
	MimeType string    `json:"mimeType"`
	Type     MediaType `json:"type"`

	// Url The url to the media item.
	Url string `json:"url"`
}

// MediaMetadata defines model for MediaMetadata.
type MediaMetadata map[string]string

// MediaType defines model for MediaType.
type MediaType string

// MessagingTemplateDto defines model for MessagingTemplateDto.
type MessagingTemplateDto struct {
	// Text The template text.
	Text string `json:"text"`
}

// MobileDeviceType defines model for MobileDeviceType.
type MobileDeviceType string

// MobilePushTokenDto defines model for MobilePushTokenDto.
type MobilePushTokenDto struct {
	// DeviceIdentifier A unique identifier for the device.
	DeviceIdentifier *string          `json:"deviceIdentifier"`
	DeviceType       MobileDeviceType `json:"deviceType"`

	// LastWakeup The last time the device was woken up.
	LastWakeup *time.Time `json:"lastWakeup"`

	// Token The token.
	Token string `json:"token"`
}

// MobilePushTokenDto2 defines model for MobilePushTokenDto2.
type MobilePushTokenDto2 struct {
	// DeviceIdentifier A unique identifier for the device.
	DeviceIdentifier *string           `json:"deviceIdentifier"`
	DeviceType       *MobileDeviceType `json:"deviceType,omitempty"`

	// Token The device token.
	Token string `json:"token"`
}

// NotificationFormattingDto defines model for NotificationFormattingDto.
type NotificationFormattingDto struct {
	Body        *LocalizedText `json:"body,omitempty"`
	ConfirmMode *ConfirmMode   `json:"confirmMode,omitempty"`
	ConfirmText *LocalizedText `json:"confirmText,omitempty"`
	ImageLarge  *LocalizedText `json:"imageLarge,omitempty"`
	ImageSmall  *LocalizedText `json:"imageSmall,omitempty"`
	LinkText    *LocalizedText `json:"linkText,omitempty"`
	LinkUrl     *LocalizedText `json:"linkUrl,omitempty"`
	Subject     LocalizedText  `json:"subject"`
}

// NotificationProperties defines model for NotificationProperties.
type NotificationProperties map[string]string

// ProcessStatus defines model for ProcessStatus.
type ProcessStatus string

// ProfileDto defines model for ProfileDto.
type ProfileDto struct {
	// AllowedTopics The allowed Topics.
	AllowedTopics *[]string `json:"allowedTopics,omitempty"`

	// EmailAddress The email of the user.
	EmailAddress string `json:"emailAddress"`

	// FullName The full name of the user.
	FullName string `json:"fullName"`

	// PhoneNumber The phone number.
	PhoneNumber *string `json:"phoneNumber"`

	// PreferredLanguage The preferred language of the user.
	PreferredLanguage *string `json:"preferredLanguage"`

	// PreferredTimezone The timezone of the user.
	PreferredTimezone *string `json:"preferredTimezone"`

	// Settings Notification settings per channel.
	Settings map[string]ChannelSettingDto `json:"settings"`

	// SupportedLanguages The supported languages.
	SupportedLanguages []string `json:"supportedLanguages"`

	// SupportedTimezones The supported timezones.
	SupportedTimezones []string `json:"supportedTimezones"`
}

// PropertyType defines model for PropertyType.
type PropertyType string

// PublishDto defines model for PublishDto.
type PublishDto struct {
	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `json:"correlationId"`

	// CreatorId A custom id to identity the creator.
	CreatorId *string `json:"creatorId"`

	// Data Additional user defined data.
	Data         *string                    `json:"data"`
	Preformatted *NotificationFormattingDto `json:"preformatted,omitempty"`
	Properties   *NotificationProperties    `json:"properties,omitempty"`
	Scheduling   *SchedulingDto             `json:"scheduling,omitempty"`

	// Settings The notification settings.
	Settings *map[string]ChannelSettingDto `json:"settings"`

	// Silent True when silent.
	Silent *bool `json:"silent,omitempty"`

	// TemplateCode The template code.
	TemplateCode *string `json:"templateCode"`

	// TemplateVariants The template variants with propability.
	TemplateVariants *map[string]float64 `json:"templateVariants"`

	// Test True when using test integrations.
	Test *bool `json:"test,omitempty"`

	// TimeToLiveInSeconds The time to live in seconds.
	TimeToLiveInSeconds *int32 `json:"timeToLiveInSeconds"`

	// Timestamp A custom timestamp.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Topic The topic path.
	Topic string `json:"topic"`
}

// PublishManyDto defines model for PublishManyDto.
type PublishManyDto struct {
	// Requests The publish requests.
	Requests []PublishDto `json:"requests"`
}

// RegisterMobileTokenDto defines model for RegisterMobileTokenDto.
type RegisterMobileTokenDto struct {
	// DeviceIdentifier A unique identifier for the device.
	DeviceIdentifier *string           `json:"deviceIdentifier"`
	DeviceType       *MobileDeviceType `json:"deviceType,omitempty"`

	// Token The device token.
	Token string `json:"token"`
}

// ResizeMode defines model for ResizeMode.
type ResizeMode string

// SchedulingDto defines model for SchedulingDto.
type SchedulingDto struct {
	// Date The scheduling date.
	Date        *openapi_types.Date `json:"date"`
	NextWeekDay *IsoDayOfWeek       `json:"nextWeekDay,omitempty"`

	// Time The scheduling time.
	Time *string         `json:"time,omitempty"`
	Type *SchedulingType `json:"type,omitempty"`
}

// SchedulingType defines model for SchedulingType.
type SchedulingType string

// SendConfiguration defines model for SendConfiguration.
type SendConfiguration map[string]string

// SmsTemplateDto defines model for SmsTemplateDto.
type SmsTemplateDto struct {
	// Text The template text.
	Text string `json:"text"`
}

// SubscribeDto defines model for SubscribeDto.
type SubscribeDto struct {
	// TopicPrefix The topic to add.
	TopicPrefix string `json:"topicPrefix"`

	// TopicSettings Notification settings per channel.
	TopicSettings *map[string]ChannelSettingDto `json:"topicSettings"`
}

// SubscribeManyDto defines model for SubscribeManyDto.
type SubscribeManyDto struct {
	// Subscribe A list of topics to create.
	Subscribe *[]SubscribeDto `json:"subscribe"`

	// Unsubscribe A list of topics to unsubscribe from.
	Unsubscribe *[]string `json:"unsubscribe"`
}

// SubscriptionDto defines model for SubscriptionDto.
type SubscriptionDto struct {
	// TopicPrefix The topic to add.
	TopicPrefix string `json:"topicPrefix"`

	// TopicSettings Notification settings per channel.
	TopicSettings map[string]ChannelSettingDto `json:"topicSettings"`
}

// SystemUserDto defines model for SystemUserDto.
type SystemUserDto struct {
	// CanUpdate True if the user can be updated.
	CanUpdate *bool `json:"canUpdate,omitempty"`

	// Email The email of the user. Unique value.
	Email string `json:"email"`

	// Id The id of the user.
	Id string `json:"id"`

	// IsLocked Determines if the user is locked.
	IsLocked bool `json:"isLocked"`

	// Roles Additional role for the user.
	Roles []string `json:"roles"`
}

// TemplateDto defines model for TemplateDto.
type TemplateDto struct {
	// Code The code of the template.
	Code string `json:"code"`

	// Created The date time (ISO 8601) when the template has been created.
	Created    time.Time                 `json:"created"`
	Formatting NotificationFormattingDto `json:"formatting"`

	// LastUpdate The date time (ISO 8601) when the template has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// Settings Notification settings per channel.
	Settings map[string]ChannelSettingDto `json:"settings"`
}

// TopicChannel defines model for TopicChannel.
type TopicChannel string

// TopicDto defines model for TopicDto.
type TopicDto struct {
	// Channels The channel settings.
	Channels *map[string]TopicChannel `json:"channels"`

	// Counters The statistics counters.
	Counters map[string]int64 `json:"counters"`

	// Created The date time (ISO 8601) when the topic has been created.
	Created     time.Time      `json:"created"`
	Description *LocalizedText `json:"description,omitempty"`

	// IsExplicit True when the topic is explicit.
	IsExplicit *bool `json:"isExplicit,omitempty"`

	// LastUpdate The date time (ISO 8601) when the topic has been updated.
	LastUpdate time.Time      `json:"lastUpdate"`
	Name       *LocalizedText `json:"name,omitempty"`

	// Path The topic path.
	Path string `json:"path"`

	// ShowAutomatically True to show the topic automatically to new users, e.g. when he accepts push notifications.
	ShowAutomatically *bool `json:"showAutomatically,omitempty"`
}

// TopicQueryScope defines model for TopicQueryScope.
type TopicQueryScope string

// TrackNotificationDto defines model for TrackNotificationDto.
type TrackNotificationDto struct {
	// Channel The channel name.
	Channel *string `json:"channel"`

	// ConfigurationId The configuration ID.
	ConfigurationId *string `json:"configurationId,omitempty"`

	// Confirmed The id of the noitifications to mark as confirmed.
	Confirmed *string `json:"confirmed"`

	// DeviceIdentifier The device identifier.
	DeviceIdentifier *string `json:"deviceIdentifier"`

	// Seen The id of the noitifications to mark as seen.
	Seen *[]string `json:"seen"`
}

// UpdateChannelTemplateDtoOfEmailTemplateDto defines model for UpdateChannelTemplateDtoOfEmailTemplateDto.
type UpdateChannelTemplateDtoOfEmailTemplateDto struct {
	// Languages The language specific templates.
	Languages *map[string]EmailTemplateDto `json:"languages"`

	// Name The name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary *bool `json:"primary"`
}

// UpdateChannelTemplateDtoOfMessagingTemplateDto defines model for UpdateChannelTemplateDtoOfMessagingTemplateDto.
type UpdateChannelTemplateDtoOfMessagingTemplateDto struct {
	// Languages The language specific templates.
	Languages *map[string]MessagingTemplateDto `json:"languages"`

	// Name The name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary *bool `json:"primary"`
}

// UpdateChannelTemplateDtoOfSmsTemplateDto defines model for UpdateChannelTemplateDtoOfSmsTemplateDto.
type UpdateChannelTemplateDtoOfSmsTemplateDto struct {
	// Languages The language specific templates.
	Languages *map[string]SmsTemplateDto `json:"languages"`

	// Name The name of the template.
	Name *string `json:"name"`

	// Primary True, when the template is the primary template.
	Primary *bool `json:"primary"`
}

// UpdateIntegrationDto defines model for UpdateIntegrationDto.
type UpdateIntegrationDto struct {
	// Condition The javascript condition.
	Condition *string `json:"condition"`

	// Enabled True when enabled.
	Enabled *bool `json:"enabled"`

	// Priority The priority in which order the integrations must run.
	Priority *int32 `json:"priority"`

	// Properties The configured properties.
	Properties map[string]string `json:"properties"`

	// Test True when used for test events.
	Test *bool `json:"test"`
}

// UpdateProfileDto defines model for UpdateProfileDto.
type UpdateProfileDto struct {
	// EmailAddress The email of the user.
	EmailAddress *string `json:"emailAddress"`

	// FullName The full name of the user.
	FullName *string `json:"fullName"`

	// PhoneNumber The phone number.
	PhoneNumber *string `json:"phoneNumber"`

	// PreferredLanguage The preferred language of the user.
	PreferredLanguage *string `json:"preferredLanguage"`

	// PreferredTimezone The timezone of the user.
	PreferredTimezone *string `json:"preferredTimezone"`

	// Settings Notification settings per channel.
	Settings *map[string]ChannelSettingDto `json:"settings"`
}

// UpdateSystemUserDto defines model for UpdateSystemUserDto.
type UpdateSystemUserDto struct {
	// Email The email of the user. Unique value.
	Email openapi_types.Email `json:"email"`

	// Password The password of the user.
	Password *string `json:"password"`

	// Roles Additional role for the user.
	Roles []string `json:"roles"`
}

// UpsertAppDto defines model for UpsertAppDto.
type UpsertAppDto struct {
	// AllowEmail True, when emails are allowed.
	AllowEmail *bool `json:"allowEmail"`

	// AllowSms True, when SMS are allowed.
	AllowSms *bool `json:"allowSms"`

	// ConfirmUrl The confirm URL.
	ConfirmUrl *string `json:"confirmUrl"`

	// EmailAddress The sender email address.
	EmailAddress *string `json:"emailAddress"`

	// EmailName The sender email name.
	EmailName *string `json:"emailName"`

	// FirebaseCredential The firebase credentials.
	FirebaseCredential *string `json:"firebaseCredential"`

	// FirebaseProject The firebase project ID.
	FirebaseProject *string `json:"firebaseProject"`

	// Languages The supported languages.
	Languages *[]string `json:"languages"`

	// Name The app name.
	Name *string `json:"name"`

	// WebhookUrl The webhook URL.
	WebhookUrl *string `json:"webhookUrl"`
}

// UpsertTemplateDto defines model for UpsertTemplateDto.
type UpsertTemplateDto struct {
	// Code The code of the template.
	Code       string                    `json:"code"`
	Formatting NotificationFormattingDto `json:"formatting"`

	// Settings Notification settings per channel.
	Settings *map[string]ChannelSettingDto `json:"settings"`
}

// UpsertTemplatesDto defines model for UpsertTemplatesDto.
type UpsertTemplatesDto struct {
	// Requests The templates to update.
	Requests []UpsertTemplateDto `json:"requests"`
}

// UpsertTopicDto defines model for UpsertTopicDto.
type UpsertTopicDto struct {
	// Channels Settings per channel.
	Channels    *map[string]TopicChannel `json:"channels"`
	Description *LocalizedText           `json:"description,omitempty"`
	Name        *LocalizedText           `json:"name,omitempty"`

	// Path The path of the topic.
	Path *string `json:"path,omitempty"`

	// ShowAutomatically True to show the topic automatically to new users, e.g. when he accepts push notifications.
	ShowAutomatically *bool `json:"showAutomatically"`
}

// UpsertTopicsDto defines model for UpsertTopicsDto.
type UpsertTopicsDto struct {
	// Requests The topics to update.
	Requests []UpsertTopicDto `json:"requests"`
}

// UpsertUserDto defines model for UpsertUserDto.
type UpsertUserDto struct {
	// EmailAddress The email of the user.
	EmailAddress *string `json:"emailAddress"`

	// FullName The full name of the user.
	FullName *string `json:"fullName"`

	// Id The id of the user.
	Id *string `json:"id"`

	// PhoneNumber The phone number.
	PhoneNumber *string `json:"phoneNumber"`

	// PreferredLanguage The preferred language of the user.
	PreferredLanguage *string `json:"preferredLanguage"`

	// PreferredTimezone The timezone of the user.
	PreferredTimezone *string `json:"preferredTimezone"`

	// Properties The user properties.
	Properties *map[string]string `json:"properties"`

	// RequiresWhitelistedTopics True when only whitelisted topic are allowed.
	RequiresWhitelistedTopics *bool `json:"requiresWhitelistedTopics"`

	// Settings Notification settings per channel.
	Settings *map[string]ChannelSettingDto `json:"settings"`
}

// UpsertUsersDto defines model for UpsertUsersDto.
type UpsertUsersDto struct {
	// Requests The users to update.
	Requests []UpsertUserDto `json:"requests"`
}

// UserDto defines model for UserDto.
type UserDto struct {
	// ApiKey The unique api key for the user.
	ApiKey string `json:"apiKey"`

	// Counters The statistics counters.
	Counters map[string]int64 `json:"counters"`

	// Created The date time (ISO 8601) when the user has been created.
	Created time.Time `json:"created"`

	// EmailAddress The email of the user.
	EmailAddress *string `json:"emailAddress"`

	// FullName The full name of the user.
	FullName *string `json:"fullName"`

	// Id The id of the user.
	Id string `json:"id"`

	// LastNotification The date time (ISO 8601) when the user has been received the last notification.
	LastNotification *time.Time `json:"lastNotification"`

	// LastUpdate The date time (ISO 8601) when the user has been updated.
	LastUpdate time.Time `json:"lastUpdate"`

	// MobilePushTokens The mobile push tokens.
	MobilePushTokens []MobilePushTokenDto `json:"mobilePushTokens"`

	// PhoneNumber The phone number.
	PhoneNumber *string `json:"phoneNumber"`

	// PreferredLanguage The preferred language of the user.
	PreferredLanguage *string `json:"preferredLanguage"`

	// PreferredTimezone The timezone of the user.
	PreferredTimezone *string `json:"preferredTimezone"`

	// Properties The user properties.
	Properties *map[string]string `json:"properties"`

	// RequiresWhitelistedTopics True when only whitelisted topic are allowed.
	RequiresWhitelistedTopics bool `json:"requiresWhitelistedTopics"`

	// Settings Notification settings per channel.
	Settings map[string]ChannelSettingDto `json:"settings"`

	// UserProperties The supported user properties.
	UserProperties *[]UserPropertyDto `json:"userProperties"`

	// WebPushSubscriptions The web push subscriptions.
	WebPushSubscriptions []WebPushSubscriptionDto `json:"webPushSubscriptions"`
}

// UserNotificationBaseDto defines model for UserNotificationBaseDto.
type UserNotificationBaseDto struct {
	// Body The optional body text.
	Body *string `json:"body"`

	// ConfirmText The text for the confirm button.
	ConfirmText *string `json:"confirmText"`

	// ConfirmUrl The tracking url that needs to be invoked to mark the notification as confirmed.
	ConfirmUrl *string `json:"confirmUrl"`

	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `json:"correlationId"`

	// Created The timestamp when the notification has been created.
	Created time.Time `json:"created"`

	// Data Optional data, usually a json object.
	Data *string `json:"data"`

	// Id The id of the notification.
	Id string `json:"id"`

	// ImageLarge The optional link to the large image.
	ImageLarge *string `json:"imageLarge"`

	// ImageSmall The optional link to the small image.
	ImageSmall *string `json:"imageSmall"`

	// LinkText The link text.
	LinkText *string `json:"linkText"`

	// LinkUrl An optional link.
	LinkUrl    *string                 `json:"linkUrl"`
	Properties *NotificationProperties `json:"properties,omitempty"`

	// Silent True when the notification is silent.
	Silent bool `json:"silent"`

	// Subject The subject of the notification in the language of the user.
	Subject string `json:"subject"`

	// TrackDeliveredUrl The tracking url that needs to be invoked to mark the notification as delivered.
	TrackDeliveredUrl *string `json:"trackDeliveredUrl"`

	// TrackSeenUrl The tracking url that needs to be invoked to mark the notification as seen.
	TrackSeenUrl *string `json:"trackSeenUrl"`

	// TrackingToken The tracking token.
	TrackingToken *string `json:"trackingToken"`

	// Updated The timestamp when the notification has been updated.
	Updated time.Time `json:"updated"`
}

// UserNotificationChannelDto defines model for UserNotificationChannelDto.
type UserNotificationChannelDto struct {
	// FirstConfirmed The first time the notification has been marked as confirmed for this channel.
	FirstConfirmed *time.Time `json:"firstConfirmed"`

	// FirstDelivered The first time the notification has been marked as delivered for this channel.
	FirstDelivered *time.Time `json:"firstDelivered"`

	// FirstSeen The first time the notification has been marked as seen for this channel.
	FirstSeen *time.Time        `json:"firstSeen"`
	Setting   ChannelSettingDto `json:"setting"`

	// Status The status per token or configuration.
	Status map[string]ChannelSendInfoDto `json:"status"`
}

// UserNotificationDetailsDto defines model for UserNotificationDetailsDto.
type UserNotificationDetailsDto struct {
	// Body The optional body text.
	Body *string `json:"body"`

	// Channels The channel details.
	Channels map[string]UserNotificationChannelDto `json:"channels"`

	// ConfirmText The text for the confirm button.
	ConfirmText *string `json:"confirmText"`

	// ConfirmUrl The tracking url that needs to be invoked to mark the notification as confirmed.
	ConfirmUrl *string `json:"confirmUrl"`

	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `json:"correlationId"`

	// Created The timestamp when the notification has been created.
	Created time.Time `json:"created"`

	// Data Optional data, usually a json object.
	Data           *string         `json:"data"`
	FirstConfirmed *HandledInfoDto `json:"firstConfirmed,omitempty"`
	FirstDelivered *HandledInfoDto `json:"firstDelivered,omitempty"`
	FirstSeen      *HandledInfoDto `json:"firstSeen,omitempty"`

	// Id The id of the notification.
	Id string `json:"id"`

	// ImageLarge The optional link to the large image.
	ImageLarge *string `json:"imageLarge"`

	// ImageSmall The optional link to the small image.
	ImageSmall *string `json:"imageSmall"`

	// LinkText The link text.
	LinkText *string `json:"linkText"`

	// LinkUrl An optional link.
	LinkUrl    *string                 `json:"linkUrl"`
	Properties *NotificationProperties `json:"properties,omitempty"`

	// Silent True when the notification is silent.
	Silent bool `json:"silent"`

	// Subject The subject of the notification in the language of the user.
	Subject string `json:"subject"`

	// TrackDeliveredUrl The tracking url that needs to be invoked to mark the notification as delivered.
	TrackDeliveredUrl *string `json:"trackDeliveredUrl"`

	// TrackSeenUrl The tracking url that needs to be invoked to mark the notification as seen.
	TrackSeenUrl *string `json:"trackSeenUrl"`

	// TrackingToken The tracking token.
	TrackingToken *string `json:"trackingToken"`

	// Updated The timestamp when the notification has been updated.
	Updated time.Time `json:"updated"`
}

// UserNotificationDto defines model for UserNotificationDto.
type UserNotificationDto struct {
	// Body The optional body text.
	Body *string `json:"body"`

	// ConfirmText The text for the confirm button.
	ConfirmText *string `json:"confirmText"`

	// ConfirmUrl The tracking url that needs to be invoked to mark the notification as confirmed.
	ConfirmUrl *string `json:"confirmUrl"`

	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `json:"correlationId"`

	// Created The timestamp when the notification has been created.
	Created time.Time `json:"created"`

	// Data Optional data, usually a json object.
	Data *string `json:"data"`

	// Id The id of the notification.
	Id string `json:"id"`

	// ImageLarge The optional link to the large image.
	ImageLarge *string `json:"imageLarge"`

	// ImageSmall The optional link to the small image.
	ImageSmall *string `json:"imageSmall"`

	// IsConfirmed True when the notification has been confirmed at least once.
	IsConfirmed bool `json:"isConfirmed"`

	// IsSeen True when the notification has been seen at least once.
	IsSeen bool `json:"isSeen"`

	// LinkText The link text.
	LinkText *string `json:"linkText"`

	// LinkUrl An optional link.
	LinkUrl    *string                 `json:"linkUrl"`
	Properties *NotificationProperties `json:"properties,omitempty"`

	// Silent True when the notification is silent.
	Silent bool `json:"silent"`

	// Subject The subject of the notification in the language of the user.
	Subject string `json:"subject"`

	// TrackDeliveredUrl The tracking url that needs to be invoked to mark the notification as delivered.
	TrackDeliveredUrl *string `json:"trackDeliveredUrl"`

	// TrackSeenUrl The tracking url that needs to be invoked to mark the notification as seen.
	TrackSeenUrl *string `json:"trackSeenUrl"`

	// TrackingToken The tracking token.
	TrackingToken *string `json:"trackingToken"`

	// Updated The timestamp when the notification has been updated.
	Updated time.Time `json:"updated"`
}

// UserPropertyDto defines model for UserPropertyDto.
type UserPropertyDto struct {
	// EditorDescription The optional description.
	EditorDescription *string `json:"editorDescription"`

	// EditorLabel The optional label.
	EditorLabel *string `json:"editorLabel"`

	// Name The field name for the property.
	Name string `json:"name"`
}

// UserTopicDto defines model for UserTopicDto.
type UserTopicDto struct {
	// Channels The channel options.
	Channels map[string]TopicChannel `json:"channels"`

	// Description The optional description.
	Description *string `json:"description"`

	// Name The name.
	Name string `json:"name"`

	// Path The path.
	Path string `json:"path"`

	// ShowAutomatically True to show the topic automatically to new users, e.g. when he accepts push notifications.
	ShowAutomatically *bool `json:"showAutomatically,omitempty"`
}

// WebPushSubscriptionDto defines model for WebPushSubscriptionDto.
type WebPushSubscriptionDto struct {
	// Endpoint The endpoint.
	Endpoint string `json:"endpoint"`
}

// EmailTemplatesGetTemplatesParams defines parameters for EmailTemplatesGetTemplates.
type EmailTemplatesGetTemplatesParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// EventsGetEventsParams defines parameters for EventsGetEvents.
type EventsGetEventsParams struct {
	// Channels The active channels.
	Channels *[]string `form:"Channels,omitempty" json:"Channels,omitempty"`

	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// LogsGetLogsParams defines parameters for LogsGetLogs.
type LogsGetLogsParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// MediaGetMediasParams defines parameters for MediaGetMedias.
type MediaGetMediasParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// MediaUploadMultipartBody defines parameters for MediaUpload.
type MediaUploadMultipartBody struct {
	File *openapi_types.File `json:"file"`
}

// MediaDownloadParams defines parameters for MediaDownload.
type MediaDownloadParams struct {
	// Cache The cache duration.
	Cache *int64 `form:"cache,omitempty" json:"cache,omitempty"`

	// Download Set it to 1 to create a download response.
	Download *int32 `form:"download,omitempty" json:"download,omitempty"`

	// Bg Optional background color.
	Bg *string `form:"bg,omitempty" json:"bg,omitempty"`

	// Width The target width when an image.
	Width *int32 `form:"width,omitempty" json:"width,omitempty"`

	// Height The target height when an image.
	Height *int32 `form:"height,omitempty" json:"height,omitempty"`

	// Quality The target quality when an image.
	Quality *int32 `form:"quality,omitempty" json:"quality,omitempty"`

	// Preset A preset dimension.
	Preset *string `form:"preset,omitempty" json:"preset,omitempty"`

	// Mode The resize mode.
	Mode *ResizeMode `form:"mode,omitempty" json:"mode,omitempty"`

	// FocusX The x position of the focues point.
	FocusX *float32 `form:"focusX,omitempty" json:"focusX,omitempty"`

	// FocusY The y position of the focues point.
	FocusY *float32 `form:"focusY,omitempty" json:"focusY,omitempty"`

	// Force True to resize it and clear the cache.
	Force *bool `form:"force,omitempty" json:"force,omitempty"`

	// EmptyOnFailure True, to return an empty image on failure.
	EmptyOnFailure *bool `form:"emptyOnFailure,omitempty" json:"emptyOnFailure,omitempty"`
}

// MessagingTemplatesGetTemplatesParams defines parameters for MessagingTemplatesGetTemplates.
type MessagingTemplatesGetTemplatesParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// NotificationsGetAllNotificationsParams defines parameters for NotificationsGetAllNotifications.
type NotificationsGetAllNotificationsParams struct {
	// Channels The active channels.
	Channels *[]string `form:"Channels,omitempty" json:"Channels,omitempty"`

	// Channel The source channel.
	Channel *string `form:"Channel,omitempty" json:"Channel,omitempty"`

	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `form:"CorrelationId,omitempty" json:"CorrelationId,omitempty"`

	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// SmsTemplatesGetTemplatesParams defines parameters for SmsTemplatesGetTemplates.
type SmsTemplatesGetTemplatesParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// TemplatesGetTemplatesParams defines parameters for TemplatesGetTemplates.
type TemplatesGetTemplatesParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// TopicsGetTopicsParams defines parameters for TopicsGetTopics.
type TopicsGetTopicsParams struct {
	// Scope The scope of the query.
	Scope *TopicQueryScope `form:"Scope,omitempty" json:"Scope,omitempty"`

	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// UsersGetUsersParams defines parameters for UsersGetUsers.
type UsersGetUsersParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// WithDetails Provide extra details, might be expensive.
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`
}

// UsersGetUserParams defines parameters for UsersGetUser.
type UsersGetUserParams struct {
	// WithDetails Provide extra details, might be expensive.
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`
}

// NotificationsGetNotificationsParams defines parameters for NotificationsGetNotifications.
type NotificationsGetNotificationsParams struct {
	// Channels The active channels.
	Channels *[]string `form:"Channels,omitempty" json:"Channels,omitempty"`

	// Channel The source channel.
	Channel *string `form:"Channel,omitempty" json:"Channel,omitempty"`

	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `form:"CorrelationId,omitempty" json:"CorrelationId,omitempty"`

	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// UsersGetSubscriptionsParams defines parameters for UsersGetSubscriptions.
type UsersGetSubscriptionsParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// MediaDownload2Params defines parameters for MediaDownload2.
type MediaDownload2Params struct {
	// Cache The cache duration.
	Cache *int64 `form:"cache,omitempty" json:"cache,omitempty"`

	// Download Set it to 1 to create a download response.
	Download *int32 `form:"download,omitempty" json:"download,omitempty"`

	// Bg Optional background color.
	Bg *string `form:"bg,omitempty" json:"bg,omitempty"`

	// Width The target width when an image.
	Width *int32 `form:"width,omitempty" json:"width,omitempty"`

	// Height The target height when an image.
	Height *int32 `form:"height,omitempty" json:"height,omitempty"`

	// Quality The target quality when an image.
	Quality *int32 `form:"quality,omitempty" json:"quality,omitempty"`

	// Preset A preset dimension.
	Preset *string `form:"preset,omitempty" json:"preset,omitempty"`

	// Mode The resize mode.
	Mode *ResizeMode `form:"mode,omitempty" json:"mode,omitempty"`

	// FocusX The x position of the focues point.
	FocusX *float32 `form:"focusX,omitempty" json:"focusX,omitempty"`

	// FocusY The y position of the focues point.
	FocusY *float32 `form:"focusY,omitempty" json:"focusY,omitempty"`

	// Force True to resize it and clear the cache.
	Force *bool `form:"force,omitempty" json:"force,omitempty"`

	// EmptyOnFailure True, to return an empty image on failure.
	EmptyOnFailure *bool `form:"emptyOnFailure,omitempty" json:"emptyOnFailure,omitempty"`
}

// MediaProxyProxyImageParams defines parameters for MediaProxyProxyImage.
type MediaProxyProxyImageParams struct {
	// Url The app id where the media belongs to.
	Url *string `form:"url,omitempty" json:"url,omitempty"`

	// Cache The cache duration.
	Cache *int64 `form:"cache,omitempty" json:"cache,omitempty"`

	// Download Set it to 1 to create a download response.
	Download *int32 `form:"download,omitempty" json:"download,omitempty"`

	// Bg Optional background color.
	Bg *string `form:"bg,omitempty" json:"bg,omitempty"`

	// Width The target width when an image.
	Width *int32 `form:"width,omitempty" json:"width,omitempty"`

	// Height The target height when an image.
	Height *int32 `form:"height,omitempty" json:"height,omitempty"`

	// Quality The target quality when an image.
	Quality *int32 `form:"quality,omitempty" json:"quality,omitempty"`

	// Preset A preset dimension.
	Preset *string `form:"preset,omitempty" json:"preset,omitempty"`

	// Mode The resize mode.
	Mode *ResizeMode `form:"mode,omitempty" json:"mode,omitempty"`

	// FocusX The x position of the focues point.
	FocusX *float32 `form:"focusX,omitempty" json:"focusX,omitempty"`

	// FocusY The y position of the focues point.
	FocusY *float32 `form:"focusY,omitempty" json:"focusY,omitempty"`

	// Force True to resize it and clear the cache.
	Force *bool `form:"force,omitempty" json:"force,omitempty"`

	// EmptyOnFailure True, to return an empty image on failure.
	EmptyOnFailure *bool `form:"emptyOnFailure,omitempty" json:"emptyOnFailure,omitempty"`
}

// MediaDownload3Params defines parameters for MediaDownload3.
type MediaDownload3Params struct {
	// Cache The cache duration.
	Cache *int64 `form:"cache,omitempty" json:"cache,omitempty"`

	// Download Set it to 1 to create a download response.
	Download *int32 `form:"download,omitempty" json:"download,omitempty"`

	// Bg Optional background color.
	Bg *string `form:"bg,omitempty" json:"bg,omitempty"`

	// Width The target width when an image.
	Width *int32 `form:"width,omitempty" json:"width,omitempty"`

	// Height The target height when an image.
	Height *int32 `form:"height,omitempty" json:"height,omitempty"`

	// Quality The target quality when an image.
	Quality *int32 `form:"quality,omitempty" json:"quality,omitempty"`

	// Preset A preset dimension.
	Preset *string `form:"preset,omitempty" json:"preset,omitempty"`

	// Mode The resize mode.
	Mode *ResizeMode `form:"mode,omitempty" json:"mode,omitempty"`

	// FocusX The x position of the focues point.
	FocusX *float32 `form:"focusX,omitempty" json:"focusX,omitempty"`

	// FocusY The y position of the focues point.
	FocusY *float32 `form:"focusY,omitempty" json:"focusY,omitempty"`

	// Force True to resize it and clear the cache.
	Force *bool `form:"force,omitempty" json:"force,omitempty"`

	// EmptyOnFailure True, to return an empty image on failure.
	EmptyOnFailure *bool `form:"emptyOnFailure,omitempty" json:"emptyOnFailure,omitempty"`
}

// NotificationsGetMyNotificationsParams defines parameters for NotificationsGetMyNotifications.
type NotificationsGetMyNotificationsParams struct {
	// Channels The active channels.
	Channels *[]string `form:"Channels,omitempty" json:"Channels,omitempty"`

	// Channel The source channel.
	Channel *string `form:"Channel,omitempty" json:"Channel,omitempty"`

	// CorrelationId The correlation ID, that can be used to query notifications.
	CorrelationId *string `form:"CorrelationId,omitempty" json:"CorrelationId,omitempty"`

	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// NotificationsGetMyArchiveParams defines parameters for NotificationsGetMyArchive.
type NotificationsGetMyArchiveParams struct {
	// Channel The tracking channel.
	Channel *string `form:"channel,omitempty" json:"channel,omitempty"`
}

// NotificationsGetMyDeviceNotificationsParams defines parameters for NotificationsGetMyDeviceNotifications.
type NotificationsGetMyDeviceNotificationsParams struct {
	// DeviceIdentifier The device identifier (aka mobile push token).
	DeviceIdentifier *string `form:"DeviceIdentifier,omitempty" json:"DeviceIdentifier,omitempty"`

	// After The max age of the notifications.
	After *time.Time `form:"After,omitempty" json:"After,omitempty"`

	// IncludeUnseen True to also include unseen notifications.
	IncludeUnseen *bool `form:"IncludeUnseen,omitempty" json:"IncludeUnseen,omitempty"`

	// Take The number of notifications to query.
	Take *int32 `form:"Take,omitempty" json:"Take,omitempty"`
}

// UserGetMySubscriptionsParams defines parameters for UserGetMySubscriptions.
type UserGetMySubscriptionsParams struct {
	// Topics The topics we are interested in.
	Topics *string `form:"Topics,omitempty" json:"Topics,omitempty"`

	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// UserGetTopicsParams defines parameters for UserGetTopics.
type UserGetTopicsParams struct {
	// Language The optional language.
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// SystemUsersGetUsersParams defines parameters for SystemUsersGetUsers.
type SystemUsersGetUsersParams struct {
	// Query The optional query to search for items.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Take The number of items to return.
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Skip The number of items to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`
}

// AppsPostAppJSONRequestBody defines body for AppsPostApp for application/json ContentType.
type AppsPostAppJSONRequestBody = UpsertAppDto

// AppsPutAppJSONRequestBody defines body for AppsPutApp for application/json ContentType.
type AppsPutAppJSONRequestBody = UpsertAppDto

// AppsPostContributorJSONRequestBody defines body for AppsPostContributor for application/json ContentType.
type AppsPostContributorJSONRequestBody = AddContributorDto

// EmailTemplatesPostTemplateJSONRequestBody defines body for EmailTemplatesPostTemplate for application/json ContentType.
type EmailTemplatesPostTemplateJSONRequestBody = CreateChannelTemplateDto

// EmailTemplatePreviewPostPreviewJSONRequestBody defines body for EmailTemplatePreviewPostPreview for application/json ContentType.
type EmailTemplatePreviewPostPreviewJSONRequestBody = EmailPreviewRequestDto

// EmailTemplatesPostTemplateLanguageJSONRequestBody defines body for EmailTemplatesPostTemplateLanguage for application/json ContentType.
type EmailTemplatesPostTemplateLanguageJSONRequestBody = CreateChannelTemplateLanguageDto

// EmailTemplatesPutTemplateJSONRequestBody defines body for EmailTemplatesPutTemplate for application/json ContentType.
type EmailTemplatesPutTemplateJSONRequestBody = UpdateChannelTemplateDtoOfEmailTemplateDto

// EmailTemplatesPutTemplateLanguageJSONRequestBody defines body for EmailTemplatesPutTemplateLanguage for application/json ContentType.
type EmailTemplatesPutTemplateLanguageJSONRequestBody = EmailTemplateDto

// EventsPostEventsJSONRequestBody defines body for EventsPostEvents for application/json ContentType.
type EventsPostEventsJSONRequestBody = PublishManyDto

// AppsPostIntegrationJSONRequestBody defines body for AppsPostIntegration for application/json ContentType.
type AppsPostIntegrationJSONRequestBody = CreateIntegrationDto

// AppsPutIntegrationJSONRequestBody defines body for AppsPutIntegration for application/json ContentType.
type AppsPutIntegrationJSONRequestBody = UpdateIntegrationDto

// MediaUploadMultipartRequestBody defines body for MediaUpload for multipart/form-data ContentType.
type MediaUploadMultipartRequestBody MediaUploadMultipartBody

// MessagingTemplatesPostTemplateJSONRequestBody defines body for MessagingTemplatesPostTemplate for application/json ContentType.
type MessagingTemplatesPostTemplateJSONRequestBody = CreateChannelTemplateDto

// MessagingTemplatesPostTemplateLanguageJSONRequestBody defines body for MessagingTemplatesPostTemplateLanguage for application/json ContentType.
type MessagingTemplatesPostTemplateLanguageJSONRequestBody = CreateChannelTemplateLanguageDto

// MessagingTemplatesPutTemplateJSONRequestBody defines body for MessagingTemplatesPutTemplate for application/json ContentType.
type MessagingTemplatesPutTemplateJSONRequestBody = UpdateChannelTemplateDtoOfMessagingTemplateDto

// MessagingTemplatesPutTemplateLanguageJSONRequestBody defines body for MessagingTemplatesPutTemplateLanguage for application/json ContentType.
type MessagingTemplatesPutTemplateLanguageJSONRequestBody = MessagingTemplateDto

// SmsTemplatesPostTemplateJSONRequestBody defines body for SmsTemplatesPostTemplate for application/json ContentType.
type SmsTemplatesPostTemplateJSONRequestBody = CreateChannelTemplateDto

// SmsTemplatesPostTemplateLanguageJSONRequestBody defines body for SmsTemplatesPostTemplateLanguage for application/json ContentType.
type SmsTemplatesPostTemplateLanguageJSONRequestBody = CreateChannelTemplateLanguageDto

// SmsTemplatesPutTemplateJSONRequestBody defines body for SmsTemplatesPutTemplate for application/json ContentType.
type SmsTemplatesPutTemplateJSONRequestBody = UpdateChannelTemplateDtoOfSmsTemplateDto

// SmsTemplatesPutTemplateLanguageJSONRequestBody defines body for SmsTemplatesPutTemplateLanguage for application/json ContentType.
type SmsTemplatesPutTemplateLanguageJSONRequestBody = SmsTemplateDto

// TemplatesPostTemplatesJSONRequestBody defines body for TemplatesPostTemplates for application/json ContentType.
type TemplatesPostTemplatesJSONRequestBody = UpsertTemplatesDto

// TopicsPostTopicsJSONRequestBody defines body for TopicsPostTopics for application/json ContentType.
type TopicsPostTopicsJSONRequestBody = UpsertTopicsDto

// UsersPostUsersJSONRequestBody defines body for UsersPostUsers for application/json ContentType.
type UsersPostUsersJSONRequestBody = UpsertUsersDto

// UsersPostAllowedTopicJSONRequestBody defines body for UsersPostAllowedTopic for application/json ContentType.
type UsersPostAllowedTopicJSONRequestBody = AddAllowedTopicDto

// UsersPostSubscriptionsJSONRequestBody defines body for UsersPostSubscriptions for application/json ContentType.
type UsersPostSubscriptionsJSONRequestBody = SubscribeManyDto

// UserPostUserJSONRequestBody defines body for UserPostUser for application/json ContentType.
type UserPostUserJSONRequestBody = UpdateProfileDto

// EventsPostMyEventsJSONRequestBody defines body for EventsPostMyEvents for application/json ContentType.
type EventsPostMyEventsJSONRequestBody = PublishDto

// MobilePushPostMyTokenJSONRequestBody defines body for MobilePushPostMyToken for application/json ContentType.
type MobilePushPostMyTokenJSONRequestBody = RegisterMobileTokenDto

// NotificationsConfirmMeJSONRequestBody defines body for NotificationsConfirmMe for application/json ContentType.
type NotificationsConfirmMeJSONRequestBody = TrackNotificationDto

// UserPostMySubscriptionsJSONRequestBody defines body for UserPostMySubscriptions for application/json ContentType.
type UserPostMySubscriptionsJSONRequestBody = SubscribeManyDto

// SystemUsersPostUserJSONRequestBody defines body for SystemUsersPostUser for application/json ContentType.
type SystemUsersPostUserJSONRequestBody = CreateSystemUserDto

// SystemUsersPutUserJSONRequestBody defines body for SystemUsersPutUser for application/json ContentType.
type SystemUsersPutUserJSONRequestBody = UpdateSystemUserDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AppsGetApps request
	AppsGetApps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPostApp request with any body
	AppsPostAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsPostApp(ctx context.Context, body AppsPostAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsGetApp request
	AppsGetApp(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPutApp request with any body
	AppsPutAppWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsPutApp(ctx context.Context, appId string, body AppsPutAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPostContributor request with any body
	AppsPostContributorWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsPostContributor(ctx context.Context, appId string, body AppsPostContributorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsDeleteContributor request
	AppsDeleteContributor(ctx context.Context, appId string, contributorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesGetTemplates request
	EmailTemplatesGetTemplates(ctx context.Context, appId string, params *EmailTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesPostTemplate request with any body
	EmailTemplatesPostTemplateWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailTemplatesPostTemplate(ctx context.Context, appId string, body EmailTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatePreviewPostPreview request with any body
	EmailTemplatePreviewPostPreviewWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailTemplatePreviewPostPreview(ctx context.Context, appId string, body EmailTemplatePreviewPostPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesDeleteTemplate request
	EmailTemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesPostTemplateLanguage request with any body
	EmailTemplatesPostTemplateLanguageWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailTemplatesPostTemplateLanguage(ctx context.Context, appId string, code string, body EmailTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesPutTemplate request with any body
	EmailTemplatesPutTemplateWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailTemplatesPutTemplate(ctx context.Context, appId string, code string, body EmailTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesDeleteTemplateLanguage request
	EmailTemplatesDeleteTemplateLanguage(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesPutTemplateLanguage request with any body
	EmailTemplatesPutTemplateLanguageWithBody(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmailTemplatesPutTemplateLanguage(ctx context.Context, appId string, code string, language string, body EmailTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatesGetTemplate request
	EmailTemplatesGetTemplate(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmailTemplatePreviewGetPreview request
	EmailTemplatePreviewGetPreview(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsGetEvents request
	EventsGetEvents(ctx context.Context, appId string, params *EventsGetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsPostEvents request with any body
	EventsPostEventsWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsPostEvents(ctx context.Context, appId string, body EventsPostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPostIntegration request with any body
	AppsPostIntegrationWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsPostIntegration(ctx context.Context, appId string, body AppsPostIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsGetIntegrations request
	AppsGetIntegrations(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsDeleteIntegration request
	AppsDeleteIntegration(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPutIntegration request with any body
	AppsPutIntegrationWithBody(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppsPutIntegration(ctx context.Context, appId string, id string, body AppsPutIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogsGetLogs request
	LogsGetLogs(ctx context.Context, appId string, params *LogsGetLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaGetMedias request
	MediaGetMedias(ctx context.Context, appId string, params *MediaGetMediasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaUpload request with any body
	MediaUploadWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaDelete request
	MediaDelete(ctx context.Context, appId string, fileName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaDownload request
	MediaDownload(ctx context.Context, appId string, fileName string, params *MediaDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesGetTemplates request
	MessagingTemplatesGetTemplates(ctx context.Context, appId string, params *MessagingTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesPostTemplate request with any body
	MessagingTemplatesPostTemplateWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MessagingTemplatesPostTemplate(ctx context.Context, appId string, body MessagingTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesDeleteTemplate request
	MessagingTemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesPostTemplateLanguage request with any body
	MessagingTemplatesPostTemplateLanguageWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MessagingTemplatesPostTemplateLanguage(ctx context.Context, appId string, code string, body MessagingTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesPutTemplate request with any body
	MessagingTemplatesPutTemplateWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MessagingTemplatesPutTemplate(ctx context.Context, appId string, code string, body MessagingTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesDeleteTemplateLanguage request
	MessagingTemplatesDeleteTemplateLanguage(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesPutTemplateLanguage request with any body
	MessagingTemplatesPutTemplateLanguageWithBody(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MessagingTemplatesPutTemplateLanguage(ctx context.Context, appId string, code string, language string, body MessagingTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MessagingTemplatesGetTemplate request
	MessagingTemplatesGetTemplate(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsGetAllNotifications request
	NotificationsGetAllNotifications(ctx context.Context, appId string, params *NotificationsGetAllNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesGetTemplates request
	SmsTemplatesGetTemplates(ctx context.Context, appId string, params *SmsTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesPostTemplate request with any body
	SmsTemplatesPostTemplateWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SmsTemplatesPostTemplate(ctx context.Context, appId string, body SmsTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesDeleteTemplate request
	SmsTemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesPostTemplateLanguage request with any body
	SmsTemplatesPostTemplateLanguageWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SmsTemplatesPostTemplateLanguage(ctx context.Context, appId string, code string, body SmsTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesPutTemplate request with any body
	SmsTemplatesPutTemplateWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SmsTemplatesPutTemplate(ctx context.Context, appId string, code string, body SmsTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesDeleteTemplateLanguage request
	SmsTemplatesDeleteTemplateLanguage(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesPutTemplateLanguage request with any body
	SmsTemplatesPutTemplateLanguageWithBody(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SmsTemplatesPutTemplateLanguage(ctx context.Context, appId string, code string, language string, body SmsTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmsTemplatesGetTemplate request
	SmsTemplatesGetTemplate(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TemplatesGetTemplates request
	TemplatesGetTemplates(ctx context.Context, appId string, params *TemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TemplatesPostTemplates request with any body
	TemplatesPostTemplatesWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TemplatesPostTemplates(ctx context.Context, appId string, body TemplatesPostTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TemplatesDeleteTemplate request
	TemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TopicsGetTopics request
	TopicsGetTopics(ctx context.Context, appId string, params *TopicsGetTopicsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TopicsPostTopics request with any body
	TopicsPostTopicsWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TopicsPostTopics(ctx context.Context, appId string, body TopicsPostTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TopicsDeleteTopic request
	TopicsDeleteTopic(ctx context.Context, appId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetUsers request
	UsersGetUsers(ctx context.Context, appId string, params *UsersGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPostUsers request with any body
	UsersPostUsersWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPostUsers(ctx context.Context, appId string, body UsersPostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteUser request
	UsersDeleteUser(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetUser request
	UsersGetUser(ctx context.Context, appId string, id string, params *UsersGetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPostAllowedTopic request with any body
	UsersPostAllowedTopicWithBody(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPostAllowedTopic(ctx context.Context, appId string, id string, body UsersPostAllowedTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteAllowedTopic request
	UsersDeleteAllowedTopic(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteMobilePushToken request
	UsersDeleteMobilePushToken(ctx context.Context, appId string, id string, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsGetNotifications request
	NotificationsGetNotifications(ctx context.Context, appId string, id string, params *NotificationsGetNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetSubscriptions request
	UsersGetSubscriptions(ctx context.Context, appId string, id string, params *UsersGetSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersPostSubscriptions request with any body
	UsersPostSubscriptionsWithBody(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersPostSubscriptions(ctx context.Context, appId string, id string, body UsersPostSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteSubscription request
	UsersDeleteSubscription(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteWebPushSubscription request
	UsersDeleteWebPushSubscription(ctx context.Context, appId string, id string, endpoint string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaDownload2 request
	MediaDownload2(ctx context.Context, appId string, fileName string, params *MediaDownload2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaProxyProxyImage request
	MediaProxyProxyImage(ctx context.Context, params *MediaProxyProxyImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MediaDownload3 request
	MediaDownload3(ctx context.Context, appId string, fileName string, params *MediaDownload3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiagnosticsGetDump request
	DiagnosticsGetDump(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiagnosticsGetGCDump request
	DiagnosticsGetGCDump(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigsGetLanguages request
	ConfigsGetLanguages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetUser request
	UserGetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserPostUser request with any body
	UserPostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserPostUser(ctx context.Context, body UserPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetAdminUser request
	UserGetAdminUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EventsPostMyEvents request with any body
	EventsPostMyEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EventsPostMyEvents(ctx context.Context, body EventsPostMyEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MobilePushGetMyToken request
	MobilePushGetMyToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MobilePushPostMyToken request with any body
	MobilePushPostMyTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MobilePushPostMyToken(ctx context.Context, body MobilePushPostMyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MobilePushDeleteMyToken request
	MobilePushDeleteMyToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsGetMyNotifications request
	NotificationsGetMyNotifications(ctx context.Context, params *NotificationsGetMyNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsGetMyArchive request
	NotificationsGetMyArchive(ctx context.Context, params *NotificationsGetMyArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsGetMyDeviceNotifications request
	NotificationsGetMyDeviceNotifications(ctx context.Context, params *NotificationsGetMyDeviceNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationsConfirmMe request with any body
	NotificationsConfirmMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationsConfirmMe(ctx context.Context, body NotificationsConfirmMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetMySubscriptions request
	UserGetMySubscriptions(ctx context.Context, params *UserGetMySubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserPostMySubscriptions request with any body
	UserPostMySubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserPostMySubscriptions(ctx context.Context, body UserPostMySubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserDeleteSubscription request
	UserDeleteSubscription(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetMySubscription request
	UserGetMySubscription(ctx context.Context, topic string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetTopics request
	UserGetTopics(ctx context.Context, params *UserGetTopicsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersGetUsers request
	SystemUsersGetUsers(ctx context.Context, params *SystemUsersGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersPostUser request with any body
	SystemUsersPostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemUsersPostUser(ctx context.Context, body SystemUsersPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersDeleteUser request
	SystemUsersDeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersGetUser request
	SystemUsersGetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersPutUser request with any body
	SystemUsersPutUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemUsersPutUser(ctx context.Context, id string, body SystemUsersPutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersLockUser request
	SystemUsersLockUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemUsersUnlockUser request
	SystemUsersUnlockUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigsGetTimezones request
	ConfigsGetTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PingGetPing request
	PingGetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AppsGetApps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsGetAppsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPostAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPostAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPostApp(ctx context.Context, body AppsPostAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPostAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsGetApp(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsGetAppRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPutAppWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPutAppRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPutApp(ctx context.Context, appId string, body AppsPutAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPutAppRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPostContributorWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPostContributorRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPostContributor(ctx context.Context, appId string, body AppsPostContributorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPostContributorRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsDeleteContributor(ctx context.Context, appId string, contributorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsDeleteContributorRequest(c.Server, appId, contributorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesGetTemplates(ctx context.Context, appId string, params *EmailTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesGetTemplatesRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPostTemplateWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPostTemplateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPostTemplate(ctx context.Context, appId string, body EmailTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPostTemplateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatePreviewPostPreviewWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatePreviewPostPreviewRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatePreviewPostPreview(ctx context.Context, appId string, body EmailTemplatePreviewPostPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatePreviewPostPreviewRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesDeleteTemplateRequest(c.Server, appId, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPostTemplateLanguageWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPostTemplateLanguageRequestWithBody(c.Server, appId, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPostTemplateLanguage(ctx context.Context, appId string, code string, body EmailTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPostTemplateLanguageRequest(c.Server, appId, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPutTemplateWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPutTemplateRequestWithBody(c.Server, appId, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPutTemplate(ctx context.Context, appId string, code string, body EmailTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPutTemplateRequest(c.Server, appId, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesDeleteTemplateLanguage(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesDeleteTemplateLanguageRequest(c.Server, appId, code, language)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPutTemplateLanguageWithBody(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPutTemplateLanguageRequestWithBody(c.Server, appId, code, language, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesPutTemplateLanguage(ctx context.Context, appId string, code string, language string, body EmailTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesPutTemplateLanguageRequest(c.Server, appId, code, language, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatesGetTemplate(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatesGetTemplateRequest(c.Server, appId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmailTemplatePreviewGetPreview(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmailTemplatePreviewGetPreviewRequest(c.Server, appId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsGetEvents(ctx context.Context, appId string, params *EventsGetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsGetEventsRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsPostEventsWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsPostEventsRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsPostEvents(ctx context.Context, appId string, body EventsPostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsPostEventsRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPostIntegrationWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPostIntegrationRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPostIntegration(ctx context.Context, appId string, body AppsPostIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPostIntegrationRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsGetIntegrations(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsGetIntegrationsRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsDeleteIntegration(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsDeleteIntegrationRequest(c.Server, appId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPutIntegrationWithBody(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPutIntegrationRequestWithBody(c.Server, appId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPutIntegration(ctx context.Context, appId string, id string, body AppsPutIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPutIntegrationRequest(c.Server, appId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogsGetLogs(ctx context.Context, appId string, params *LogsGetLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogsGetLogsRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaGetMedias(ctx context.Context, appId string, params *MediaGetMediasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaGetMediasRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaUploadWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaUploadRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaDelete(ctx context.Context, appId string, fileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaDeleteRequest(c.Server, appId, fileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaDownload(ctx context.Context, appId string, fileName string, params *MediaDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaDownloadRequest(c.Server, appId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesGetTemplates(ctx context.Context, appId string, params *MessagingTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesGetTemplatesRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPostTemplateWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPostTemplateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPostTemplate(ctx context.Context, appId string, body MessagingTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPostTemplateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesDeleteTemplateRequest(c.Server, appId, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPostTemplateLanguageWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPostTemplateLanguageRequestWithBody(c.Server, appId, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPostTemplateLanguage(ctx context.Context, appId string, code string, body MessagingTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPostTemplateLanguageRequest(c.Server, appId, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPutTemplateWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPutTemplateRequestWithBody(c.Server, appId, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPutTemplate(ctx context.Context, appId string, code string, body MessagingTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPutTemplateRequest(c.Server, appId, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesDeleteTemplateLanguage(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesDeleteTemplateLanguageRequest(c.Server, appId, code, language)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPutTemplateLanguageWithBody(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPutTemplateLanguageRequestWithBody(c.Server, appId, code, language, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesPutTemplateLanguage(ctx context.Context, appId string, code string, language string, body MessagingTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesPutTemplateLanguageRequest(c.Server, appId, code, language, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MessagingTemplatesGetTemplate(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMessagingTemplatesGetTemplateRequest(c.Server, appId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsGetAllNotifications(ctx context.Context, appId string, params *NotificationsGetAllNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsGetAllNotificationsRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesGetTemplates(ctx context.Context, appId string, params *SmsTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesGetTemplatesRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPostTemplateWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPostTemplateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPostTemplate(ctx context.Context, appId string, body SmsTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPostTemplateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesDeleteTemplateRequest(c.Server, appId, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPostTemplateLanguageWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPostTemplateLanguageRequestWithBody(c.Server, appId, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPostTemplateLanguage(ctx context.Context, appId string, code string, body SmsTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPostTemplateLanguageRequest(c.Server, appId, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPutTemplateWithBody(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPutTemplateRequestWithBody(c.Server, appId, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPutTemplate(ctx context.Context, appId string, code string, body SmsTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPutTemplateRequest(c.Server, appId, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesDeleteTemplateLanguage(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesDeleteTemplateLanguageRequest(c.Server, appId, code, language)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPutTemplateLanguageWithBody(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPutTemplateLanguageRequestWithBody(c.Server, appId, code, language, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesPutTemplateLanguage(ctx context.Context, appId string, code string, language string, body SmsTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesPutTemplateLanguageRequest(c.Server, appId, code, language, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmsTemplatesGetTemplate(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmsTemplatesGetTemplateRequest(c.Server, appId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TemplatesGetTemplates(ctx context.Context, appId string, params *TemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTemplatesGetTemplatesRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TemplatesPostTemplatesWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTemplatesPostTemplatesRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TemplatesPostTemplates(ctx context.Context, appId string, body TemplatesPostTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTemplatesPostTemplatesRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TemplatesDeleteTemplate(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTemplatesDeleteTemplateRequest(c.Server, appId, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TopicsGetTopics(ctx context.Context, appId string, params *TopicsGetTopicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTopicsGetTopicsRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TopicsPostTopicsWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTopicsPostTopicsRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TopicsPostTopics(ctx context.Context, appId string, body TopicsPostTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTopicsPostTopicsRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TopicsDeleteTopic(ctx context.Context, appId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTopicsDeleteTopicRequest(c.Server, appId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetUsers(ctx context.Context, appId string, params *UsersGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetUsersRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPostUsersWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPostUsersRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPostUsers(ctx context.Context, appId string, body UsersPostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPostUsersRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteUser(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteUserRequest(c.Server, appId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetUser(ctx context.Context, appId string, id string, params *UsersGetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetUserRequest(c.Server, appId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPostAllowedTopicWithBody(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPostAllowedTopicRequestWithBody(c.Server, appId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPostAllowedTopic(ctx context.Context, appId string, id string, body UsersPostAllowedTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPostAllowedTopicRequest(c.Server, appId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteAllowedTopic(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteAllowedTopicRequest(c.Server, appId, id, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteMobilePushToken(ctx context.Context, appId string, id string, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteMobilePushTokenRequest(c.Server, appId, id, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsGetNotifications(ctx context.Context, appId string, id string, params *NotificationsGetNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsGetNotificationsRequest(c.Server, appId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetSubscriptions(ctx context.Context, appId string, id string, params *UsersGetSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetSubscriptionsRequest(c.Server, appId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPostSubscriptionsWithBody(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPostSubscriptionsRequestWithBody(c.Server, appId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersPostSubscriptions(ctx context.Context, appId string, id string, body UsersPostSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersPostSubscriptionsRequest(c.Server, appId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteSubscription(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteSubscriptionRequest(c.Server, appId, id, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteWebPushSubscription(ctx context.Context, appId string, id string, endpoint string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteWebPushSubscriptionRequest(c.Server, appId, id, endpoint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaDownload2(ctx context.Context, appId string, fileName string, params *MediaDownload2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaDownload2Request(c.Server, appId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaProxyProxyImage(ctx context.Context, params *MediaProxyProxyImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaProxyProxyImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MediaDownload3(ctx context.Context, appId string, fileName string, params *MediaDownload3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMediaDownload3Request(c.Server, appId, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiagnosticsGetDump(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiagnosticsGetDumpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiagnosticsGetGCDump(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiagnosticsGetGCDumpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigsGetLanguages(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigsGetLanguagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPostUser(ctx context.Context, body UserPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetAdminUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetAdminUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsPostMyEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsPostMyEventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EventsPostMyEvents(ctx context.Context, body EventsPostMyEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEventsPostMyEventsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MobilePushGetMyToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMobilePushGetMyTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MobilePushPostMyTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMobilePushPostMyTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MobilePushPostMyToken(ctx context.Context, body MobilePushPostMyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMobilePushPostMyTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MobilePushDeleteMyToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMobilePushDeleteMyTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsGetMyNotifications(ctx context.Context, params *NotificationsGetMyNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsGetMyNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsGetMyArchive(ctx context.Context, params *NotificationsGetMyArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsGetMyArchiveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsGetMyDeviceNotifications(ctx context.Context, params *NotificationsGetMyDeviceNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsGetMyDeviceNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsConfirmMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsConfirmMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationsConfirmMe(ctx context.Context, body NotificationsConfirmMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationsConfirmMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetMySubscriptions(ctx context.Context, params *UserGetMySubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetMySubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPostMySubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPostMySubscriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPostMySubscriptions(ctx context.Context, body UserPostMySubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPostMySubscriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserDeleteSubscription(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserDeleteSubscriptionRequest(c.Server, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetMySubscription(ctx context.Context, topic string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetMySubscriptionRequest(c.Server, topic)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetTopics(ctx context.Context, params *UserGetTopicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetTopicsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersGetUsers(ctx context.Context, params *SystemUsersGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersPostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersPostUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersPostUser(ctx context.Context, body SystemUsersPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersPostUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersDeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersGetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersGetUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersPutUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersPutUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersPutUser(ctx context.Context, id string, body SystemUsersPutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersPutUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersLockUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersLockUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemUsersUnlockUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemUsersUnlockUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigsGetTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigsGetTimezonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PingGetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAppsGetAppsRequest generates requests for AppsGetApps
func NewAppsGetAppsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPostAppRequest calls the generic AppsPostApp builder with application/json body
func NewAppsPostAppRequest(server string, body AppsPostAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsPostAppRequestWithBody(server, "application/json", bodyReader)
}

// NewAppsPostAppRequestWithBody generates requests for AppsPostApp with any type of body
func NewAppsPostAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppsGetAppRequest generates requests for AppsGetApp
func NewAppsGetAppRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPutAppRequest calls the generic AppsPutApp builder with application/json body
func NewAppsPutAppRequest(server string, appId string, body AppsPutAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsPutAppRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAppsPutAppRequestWithBody generates requests for AppsPutApp with any type of body
func NewAppsPutAppRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppsPostContributorRequest calls the generic AppsPostContributor builder with application/json body
func NewAppsPostContributorRequest(server string, appId string, body AppsPostContributorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsPostContributorRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAppsPostContributorRequestWithBody generates requests for AppsPostContributor with any type of body
func NewAppsPostContributorRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/contributors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppsDeleteContributorRequest generates requests for AppsDeleteContributor
func NewAppsDeleteContributorRequest(server string, appId string, contributorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contributorId", runtime.ParamLocationPath, contributorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/contributors/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailTemplatesGetTemplatesRequest generates requests for EmailTemplatesGetTemplates
func NewEmailTemplatesGetTemplatesRequest(server string, appId string, params *EmailTemplatesGetTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailTemplatesPostTemplateRequest calls the generic EmailTemplatesPostTemplate builder with application/json body
func NewEmailTemplatesPostTemplateRequest(server string, appId string, body EmailTemplatesPostTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailTemplatesPostTemplateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewEmailTemplatesPostTemplateRequestWithBody generates requests for EmailTemplatesPostTemplate with any type of body
func NewEmailTemplatesPostTemplateRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailTemplatePreviewPostPreviewRequest calls the generic EmailTemplatePreviewPostPreview builder with application/json body
func NewEmailTemplatePreviewPostPreviewRequest(server string, appId string, body EmailTemplatePreviewPostPreviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailTemplatePreviewPostPreviewRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewEmailTemplatePreviewPostPreviewRequestWithBody generates requests for EmailTemplatePreviewPostPreview with any type of body
func NewEmailTemplatePreviewPostPreviewRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/render", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailTemplatesDeleteTemplateRequest generates requests for EmailTemplatesDeleteTemplate
func NewEmailTemplatesDeleteTemplateRequest(server string, appId string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailTemplatesPostTemplateLanguageRequest calls the generic EmailTemplatesPostTemplateLanguage builder with application/json body
func NewEmailTemplatesPostTemplateLanguageRequest(server string, appId string, code string, body EmailTemplatesPostTemplateLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailTemplatesPostTemplateLanguageRequestWithBody(server, appId, code, "application/json", bodyReader)
}

// NewEmailTemplatesPostTemplateLanguageRequestWithBody generates requests for EmailTemplatesPostTemplateLanguage with any type of body
func NewEmailTemplatesPostTemplateLanguageRequestWithBody(server string, appId string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailTemplatesPutTemplateRequest calls the generic EmailTemplatesPutTemplate builder with application/json body
func NewEmailTemplatesPutTemplateRequest(server string, appId string, code string, body EmailTemplatesPutTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailTemplatesPutTemplateRequestWithBody(server, appId, code, "application/json", bodyReader)
}

// NewEmailTemplatesPutTemplateRequestWithBody generates requests for EmailTemplatesPutTemplate with any type of body
func NewEmailTemplatesPutTemplateRequestWithBody(server string, appId string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailTemplatesDeleteTemplateLanguageRequest generates requests for EmailTemplatesDeleteTemplateLanguage
func NewEmailTemplatesDeleteTemplateLanguageRequest(server string, appId string, code string, language string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailTemplatesPutTemplateLanguageRequest calls the generic EmailTemplatesPutTemplateLanguage builder with application/json body
func NewEmailTemplatesPutTemplateLanguageRequest(server string, appId string, code string, language string, body EmailTemplatesPutTemplateLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmailTemplatesPutTemplateLanguageRequestWithBody(server, appId, code, language, "application/json", bodyReader)
}

// NewEmailTemplatesPutTemplateLanguageRequestWithBody generates requests for EmailTemplatesPutTemplateLanguage with any type of body
func NewEmailTemplatesPutTemplateLanguageRequestWithBody(server string, appId string, code string, language string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmailTemplatesGetTemplateRequest generates requests for EmailTemplatesGetTemplate
func NewEmailTemplatesGetTemplateRequest(server string, appId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEmailTemplatePreviewGetPreviewRequest generates requests for EmailTemplatePreviewGetPreview
func NewEmailTemplatePreviewGetPreviewRequest(server string, appId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/email-templates/%s/preview", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsGetEventsRequest generates requests for EventsGetEvents
func NewEventsGetEventsRequest(server string, appId string, params *EventsGetEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channels", runtime.ParamLocationQuery, *params.Channels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsPostEventsRequest calls the generic EventsPostEvents builder with application/json body
func NewEventsPostEventsRequest(server string, appId string, body EventsPostEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsPostEventsRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewEventsPostEventsRequestWithBody generates requests for EventsPostEvents with any type of body
func NewEventsPostEventsRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppsPostIntegrationRequest calls the generic AppsPostIntegration builder with application/json body
func NewAppsPostIntegrationRequest(server string, appId string, body AppsPostIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsPostIntegrationRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAppsPostIntegrationRequestWithBody generates requests for AppsPostIntegration with any type of body
func NewAppsPostIntegrationRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/integration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAppsGetIntegrationsRequest generates requests for AppsGetIntegrations
func NewAppsGetIntegrationsRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/integrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsDeleteIntegrationRequest generates requests for AppsDeleteIntegration
func NewAppsDeleteIntegrationRequest(server string, appId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/integrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPutIntegrationRequest calls the generic AppsPutIntegration builder with application/json body
func NewAppsPutIntegrationRequest(server string, appId string, id string, body AppsPutIntegrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppsPutIntegrationRequestWithBody(server, appId, id, "application/json", bodyReader)
}

// NewAppsPutIntegrationRequestWithBody generates requests for AppsPutIntegration with any type of body
func NewAppsPutIntegrationRequestWithBody(server string, appId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/integrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogsGetLogsRequest generates requests for LogsGetLogs
func NewLogsGetLogsRequest(server string, appId string, params *LogsGetLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaGetMediasRequest generates requests for MediaGetMedias
func NewMediaGetMediasRequest(server string, appId string, params *MediaGetMediasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/media", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaUploadRequestWithBody generates requests for MediaUpload with any type of body
func NewMediaUploadRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/media", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMediaDeleteRequest generates requests for MediaDelete
func NewMediaDeleteRequest(server string, appId string, fileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileName", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/media/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaDownloadRequest generates requests for MediaDownload
func NewMediaDownloadRequest(server string, appId string, fileName string, params *MediaDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileName", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/media/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cache != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cache", runtime.ParamLocationQuery, *params.Cache); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bg", runtime.ParamLocationQuery, *params.Bg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Width != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, *params.Width); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Height != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, *params.Height); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Quality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality", runtime.ParamLocationQuery, *params.Quality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Preset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preset", runtime.ParamLocationQuery, *params.Preset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusX", runtime.ParamLocationQuery, *params.FocusX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusY", runtime.ParamLocationQuery, *params.FocusY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmptyOnFailure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emptyOnFailure", runtime.ParamLocationQuery, *params.EmptyOnFailure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMessagingTemplatesGetTemplatesRequest generates requests for MessagingTemplatesGetTemplates
func NewMessagingTemplatesGetTemplatesRequest(server string, appId string, params *MessagingTemplatesGetTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMessagingTemplatesPostTemplateRequest calls the generic MessagingTemplatesPostTemplate builder with application/json body
func NewMessagingTemplatesPostTemplateRequest(server string, appId string, body MessagingTemplatesPostTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMessagingTemplatesPostTemplateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewMessagingTemplatesPostTemplateRequestWithBody generates requests for MessagingTemplatesPostTemplate with any type of body
func NewMessagingTemplatesPostTemplateRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMessagingTemplatesDeleteTemplateRequest generates requests for MessagingTemplatesDeleteTemplate
func NewMessagingTemplatesDeleteTemplateRequest(server string, appId string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMessagingTemplatesPostTemplateLanguageRequest calls the generic MessagingTemplatesPostTemplateLanguage builder with application/json body
func NewMessagingTemplatesPostTemplateLanguageRequest(server string, appId string, code string, body MessagingTemplatesPostTemplateLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMessagingTemplatesPostTemplateLanguageRequestWithBody(server, appId, code, "application/json", bodyReader)
}

// NewMessagingTemplatesPostTemplateLanguageRequestWithBody generates requests for MessagingTemplatesPostTemplateLanguage with any type of body
func NewMessagingTemplatesPostTemplateLanguageRequestWithBody(server string, appId string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMessagingTemplatesPutTemplateRequest calls the generic MessagingTemplatesPutTemplate builder with application/json body
func NewMessagingTemplatesPutTemplateRequest(server string, appId string, code string, body MessagingTemplatesPutTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMessagingTemplatesPutTemplateRequestWithBody(server, appId, code, "application/json", bodyReader)
}

// NewMessagingTemplatesPutTemplateRequestWithBody generates requests for MessagingTemplatesPutTemplate with any type of body
func NewMessagingTemplatesPutTemplateRequestWithBody(server string, appId string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMessagingTemplatesDeleteTemplateLanguageRequest generates requests for MessagingTemplatesDeleteTemplateLanguage
func NewMessagingTemplatesDeleteTemplateLanguageRequest(server string, appId string, code string, language string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMessagingTemplatesPutTemplateLanguageRequest calls the generic MessagingTemplatesPutTemplateLanguage builder with application/json body
func NewMessagingTemplatesPutTemplateLanguageRequest(server string, appId string, code string, language string, body MessagingTemplatesPutTemplateLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMessagingTemplatesPutTemplateLanguageRequestWithBody(server, appId, code, language, "application/json", bodyReader)
}

// NewMessagingTemplatesPutTemplateLanguageRequestWithBody generates requests for MessagingTemplatesPutTemplateLanguage with any type of body
func NewMessagingTemplatesPutTemplateLanguageRequestWithBody(server string, appId string, code string, language string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMessagingTemplatesGetTemplateRequest generates requests for MessagingTemplatesGetTemplate
func NewMessagingTemplatesGetTemplateRequest(server string, appId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/messaging-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsGetAllNotificationsRequest generates requests for NotificationsGetAllNotifications
func NewNotificationsGetAllNotificationsRequest(server string, appId string, params *NotificationsGetAllNotificationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/notifications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channels", runtime.ParamLocationQuery, *params.Channels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrelationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CorrelationId", runtime.ParamLocationQuery, *params.CorrelationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSmsTemplatesGetTemplatesRequest generates requests for SmsTemplatesGetTemplates
func NewSmsTemplatesGetTemplatesRequest(server string, appId string, params *SmsTemplatesGetTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSmsTemplatesPostTemplateRequest calls the generic SmsTemplatesPostTemplate builder with application/json body
func NewSmsTemplatesPostTemplateRequest(server string, appId string, body SmsTemplatesPostTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSmsTemplatesPostTemplateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewSmsTemplatesPostTemplateRequestWithBody generates requests for SmsTemplatesPostTemplate with any type of body
func NewSmsTemplatesPostTemplateRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSmsTemplatesDeleteTemplateRequest generates requests for SmsTemplatesDeleteTemplate
func NewSmsTemplatesDeleteTemplateRequest(server string, appId string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSmsTemplatesPostTemplateLanguageRequest calls the generic SmsTemplatesPostTemplateLanguage builder with application/json body
func NewSmsTemplatesPostTemplateLanguageRequest(server string, appId string, code string, body SmsTemplatesPostTemplateLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSmsTemplatesPostTemplateLanguageRequestWithBody(server, appId, code, "application/json", bodyReader)
}

// NewSmsTemplatesPostTemplateLanguageRequestWithBody generates requests for SmsTemplatesPostTemplateLanguage with any type of body
func NewSmsTemplatesPostTemplateLanguageRequestWithBody(server string, appId string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSmsTemplatesPutTemplateRequest calls the generic SmsTemplatesPutTemplate builder with application/json body
func NewSmsTemplatesPutTemplateRequest(server string, appId string, code string, body SmsTemplatesPutTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSmsTemplatesPutTemplateRequestWithBody(server, appId, code, "application/json", bodyReader)
}

// NewSmsTemplatesPutTemplateRequestWithBody generates requests for SmsTemplatesPutTemplate with any type of body
func NewSmsTemplatesPutTemplateRequestWithBody(server string, appId string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSmsTemplatesDeleteTemplateLanguageRequest generates requests for SmsTemplatesDeleteTemplateLanguage
func NewSmsTemplatesDeleteTemplateLanguageRequest(server string, appId string, code string, language string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSmsTemplatesPutTemplateLanguageRequest calls the generic SmsTemplatesPutTemplateLanguage builder with application/json body
func NewSmsTemplatesPutTemplateLanguageRequest(server string, appId string, code string, language string, body SmsTemplatesPutTemplateLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSmsTemplatesPutTemplateLanguageRequestWithBody(server, appId, code, language, "application/json", bodyReader)
}

// NewSmsTemplatesPutTemplateLanguageRequestWithBody generates requests for SmsTemplatesPutTemplateLanguage with any type of body
func NewSmsTemplatesPutTemplateLanguageRequestWithBody(server string, appId string, code string, language string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSmsTemplatesGetTemplateRequest generates requests for SmsTemplatesGetTemplate
func NewSmsTemplatesGetTemplateRequest(server string, appId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/sms-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTemplatesGetTemplatesRequest generates requests for TemplatesGetTemplates
func NewTemplatesGetTemplatesRequest(server string, appId string, params *TemplatesGetTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTemplatesPostTemplatesRequest calls the generic TemplatesPostTemplates builder with application/json body
func NewTemplatesPostTemplatesRequest(server string, appId string, body TemplatesPostTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTemplatesPostTemplatesRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewTemplatesPostTemplatesRequestWithBody generates requests for TemplatesPostTemplates with any type of body
func NewTemplatesPostTemplatesRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTemplatesDeleteTemplateRequest generates requests for TemplatesDeleteTemplate
func NewTemplatesDeleteTemplateRequest(server string, appId string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTopicsGetTopicsRequest generates requests for TopicsGetTopics
func NewTopicsGetTopicsRequest(server string, appId string, params *TopicsGetTopicsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/topics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTopicsPostTopicsRequest calls the generic TopicsPostTopics builder with application/json body
func NewTopicsPostTopicsRequest(server string, appId string, body TopicsPostTopicsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTopicsPostTopicsRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewTopicsPostTopicsRequestWithBody generates requests for TopicsPostTopics with any type of body
func NewTopicsPostTopicsRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/topics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTopicsDeleteTopicRequest generates requests for TopicsDeleteTopic
func NewTopicsDeleteTopicRequest(server string, appId string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/topics/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersGetUsersRequest generates requests for UsersGetUsers
func NewUsersGetUsersRequest(server string, appId string, params *UsersGetUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPostUsersRequest calls the generic UsersPostUsers builder with application/json body
func NewUsersPostUsersRequest(server string, appId string, body UsersPostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPostUsersRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewUsersPostUsersRequestWithBody generates requests for UsersPostUsers with any type of body
func NewUsersPostUsersRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDeleteUserRequest generates requests for UsersDeleteUser
func NewUsersDeleteUserRequest(server string, appId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersGetUserRequest generates requests for UsersGetUser
func NewUsersGetUserRequest(server string, appId string, id string, params *UsersGetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPostAllowedTopicRequest calls the generic UsersPostAllowedTopic builder with application/json body
func NewUsersPostAllowedTopicRequest(server string, appId string, id string, body UsersPostAllowedTopicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPostAllowedTopicRequestWithBody(server, appId, id, "application/json", bodyReader)
}

// NewUsersPostAllowedTopicRequestWithBody generates requests for UsersPostAllowedTopic with any type of body
func NewUsersPostAllowedTopicRequestWithBody(server string, appId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/allowed-topics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDeleteAllowedTopicRequest generates requests for UsersDeleteAllowedTopic
func NewUsersDeleteAllowedTopicRequest(server string, appId string, id string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/allowed-topics/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersDeleteMobilePushTokenRequest generates requests for UsersDeleteMobilePushToken
func NewUsersDeleteMobilePushTokenRequest(server string, appId string, id string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/mobilepush/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsGetNotificationsRequest generates requests for NotificationsGetNotifications
func NewNotificationsGetNotificationsRequest(server string, appId string, id string, params *NotificationsGetNotificationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/notifications", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channels", runtime.ParamLocationQuery, *params.Channels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrelationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CorrelationId", runtime.ParamLocationQuery, *params.CorrelationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersGetSubscriptionsRequest generates requests for UsersGetSubscriptions
func NewUsersGetSubscriptionsRequest(server string, appId string, id string, params *UsersGetSubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersPostSubscriptionsRequest calls the generic UsersPostSubscriptions builder with application/json body
func NewUsersPostSubscriptionsRequest(server string, appId string, id string, body UsersPostSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersPostSubscriptionsRequestWithBody(server, appId, id, "application/json", bodyReader)
}

// NewUsersPostSubscriptionsRequestWithBody generates requests for UsersPostSubscriptions with any type of body
func NewUsersPostSubscriptionsRequestWithBody(server string, appId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersDeleteSubscriptionRequest generates requests for UsersDeleteSubscription
func NewUsersDeleteSubscriptionRequest(server string, appId string, id string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/subscriptions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersDeleteWebPushSubscriptionRequest generates requests for UsersDeleteWebPushSubscription
func NewUsersDeleteWebPushSubscriptionRequest(server string, appId string, id string, endpoint string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/apps/%s/users/%s/webpush/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaDownload2Request generates requests for MediaDownload2
func NewMediaDownload2Request(server string, appId string, fileName string, params *MediaDownload2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileName", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/asset/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cache != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cache", runtime.ParamLocationQuery, *params.Cache); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bg", runtime.ParamLocationQuery, *params.Bg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Width != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, *params.Width); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Height != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, *params.Height); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Quality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality", runtime.ParamLocationQuery, *params.Quality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Preset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preset", runtime.ParamLocationQuery, *params.Preset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusX", runtime.ParamLocationQuery, *params.FocusX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusY", runtime.ParamLocationQuery, *params.FocusY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmptyOnFailure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emptyOnFailure", runtime.ParamLocationQuery, *params.EmptyOnFailure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaProxyProxyImageRequest generates requests for MediaProxyProxyImage
func NewMediaProxyProxyImageRequest(server string, params *MediaProxyProxyImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/assets/proxy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cache != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cache", runtime.ParamLocationQuery, *params.Cache); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bg", runtime.ParamLocationQuery, *params.Bg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Width != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, *params.Width); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Height != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, *params.Height); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Quality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality", runtime.ParamLocationQuery, *params.Quality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Preset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preset", runtime.ParamLocationQuery, *params.Preset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusX", runtime.ParamLocationQuery, *params.FocusX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusY", runtime.ParamLocationQuery, *params.FocusY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmptyOnFailure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emptyOnFailure", runtime.ParamLocationQuery, *params.EmptyOnFailure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMediaDownload3Request generates requests for MediaDownload3
func NewMediaDownload3Request(server string, appId string, fileName string, params *MediaDownload3Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fileName", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/assets/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cache != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cache", runtime.ParamLocationQuery, *params.Cache); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bg != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bg", runtime.ParamLocationQuery, *params.Bg); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Width != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "width", runtime.ParamLocationQuery, *params.Width); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Height != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "height", runtime.ParamLocationQuery, *params.Height); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Quality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "quality", runtime.ParamLocationQuery, *params.Quality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Preset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "preset", runtime.ParamLocationQuery, *params.Preset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusX != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusX", runtime.ParamLocationQuery, *params.FocusX); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FocusY != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "focusY", runtime.ParamLocationQuery, *params.FocusY); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmptyOnFailure != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emptyOnFailure", runtime.ParamLocationQuery, *params.EmptyOnFailure); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDiagnosticsGetDumpRequest generates requests for DiagnosticsGetDump
func NewDiagnosticsGetDumpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/diagnostics/dump")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDiagnosticsGetGCDumpRequest generates requests for DiagnosticsGetGCDump
func NewDiagnosticsGetGCDumpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/diagnostics/gcdump")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigsGetLanguagesRequest generates requests for ConfigsGetLanguages
func NewConfigsGetLanguagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetUserRequest generates requests for UserGetUser
func NewUserGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserPostUserRequest calls the generic UserPostUser builder with application/json body
func NewUserPostUserRequest(server string, body UserPostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUserPostUserRequestWithBody generates requests for UserPostUser with any type of body
func NewUserPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserGetAdminUserRequest generates requests for UserGetAdminUser
func NewUserGetAdminUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEventsPostMyEventsRequest calls the generic EventsPostMyEvents builder with application/json body
func NewEventsPostMyEventsRequest(server string, body EventsPostMyEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEventsPostMyEventsRequestWithBody(server, "application/json", bodyReader)
}

// NewEventsPostMyEventsRequestWithBody generates requests for EventsPostMyEvents with any type of body
func NewEventsPostMyEventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMobilePushGetMyTokenRequest generates requests for MobilePushGetMyToken
func NewMobilePushGetMyTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/mobilepush")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMobilePushPostMyTokenRequest calls the generic MobilePushPostMyToken builder with application/json body
func NewMobilePushPostMyTokenRequest(server string, body MobilePushPostMyTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMobilePushPostMyTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewMobilePushPostMyTokenRequestWithBody generates requests for MobilePushPostMyToken with any type of body
func NewMobilePushPostMyTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/mobilepush")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMobilePushDeleteMyTokenRequest generates requests for MobilePushDeleteMyToken
func NewMobilePushDeleteMyTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/mobilepush/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsGetMyNotificationsRequest generates requests for NotificationsGetMyNotifications
func NewNotificationsGetMyNotificationsRequest(server string, params *NotificationsGetMyNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channels", runtime.ParamLocationQuery, *params.Channels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CorrelationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CorrelationId", runtime.ParamLocationQuery, *params.CorrelationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsGetMyArchiveRequest generates requests for NotificationsGetMyArchive
func NewNotificationsGetMyArchiveRequest(server string, params *NotificationsGetMyArchiveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/notifications/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsGetMyDeviceNotificationsRequest generates requests for NotificationsGetMyDeviceNotifications
func NewNotificationsGetMyDeviceNotificationsRequest(server string, params *NotificationsGetMyDeviceNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/notifications/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DeviceIdentifier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DeviceIdentifier", runtime.ParamLocationQuery, *params.DeviceIdentifier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "After", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUnseen != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeUnseen", runtime.ParamLocationQuery, *params.IncludeUnseen); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationsConfirmMeRequest calls the generic NotificationsConfirmMe builder with application/json body
func NewNotificationsConfirmMeRequest(server string, body NotificationsConfirmMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationsConfirmMeRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationsConfirmMeRequestWithBody generates requests for NotificationsConfirmMe with any type of body
func NewNotificationsConfirmMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/notifications/handled")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserGetMySubscriptionsRequest generates requests for UserGetMySubscriptions
func NewUserGetMySubscriptionsRequest(server string, params *UserGetMySubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Topics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Topics", runtime.ParamLocationQuery, *params.Topics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserPostMySubscriptionsRequest calls the generic UserPostMySubscriptions builder with application/json body
func NewUserPostMySubscriptionsRequest(server string, body UserPostMySubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserPostMySubscriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewUserPostMySubscriptionsRequestWithBody generates requests for UserPostMySubscriptions with any type of body
func NewUserPostMySubscriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserDeleteSubscriptionRequest generates requests for UserDeleteSubscription
func NewUserDeleteSubscriptionRequest(server string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetMySubscriptionRequest generates requests for UserGetMySubscription
func NewUserGetMySubscriptionRequest(server string, topic string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "topic", runtime.ParamLocationPath, topic)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetTopicsRequest generates requests for UserGetTopics
func NewUserGetTopicsRequest(server string, params *UserGetTopicsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/topics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemUsersGetUsersRequest generates requests for SystemUsersGetUsers
func NewSystemUsersGetUsersRequest(server string, params *SystemUsersGetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemUsersPostUserRequest calls the generic SystemUsersPostUser builder with application/json body
func NewSystemUsersPostUserRequest(server string, body SystemUsersPostUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemUsersPostUserRequestWithBody(server, "application/json", bodyReader)
}

// NewSystemUsersPostUserRequestWithBody generates requests for SystemUsersPostUser with any type of body
func NewSystemUsersPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemUsersDeleteUserRequest generates requests for SystemUsersDeleteUser
func NewSystemUsersDeleteUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemUsersGetUserRequest generates requests for SystemUsersGetUser
func NewSystemUsersGetUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemUsersPutUserRequest calls the generic SystemUsersPutUser builder with application/json body
func NewSystemUsersPutUserRequest(server string, id string, body SystemUsersPutUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemUsersPutUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSystemUsersPutUserRequestWithBody generates requests for SystemUsersPutUser with any type of body
func NewSystemUsersPutUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemUsersLockUserRequest generates requests for SystemUsersLockUser
func NewSystemUsersLockUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users/%s/lock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemUsersUnlockUserRequest generates requests for SystemUsersUnlockUser
func NewSystemUsersUnlockUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/system-users/%s/unlock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigsGetTimezonesRequest generates requests for ConfigsGetTimezones
func NewConfigsGetTimezonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPingGetPingRequest generates requests for PingGetPing
func NewPingGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AppsGetApps request
	AppsGetAppsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AppsGetAppsResponse, error)

	// AppsPostApp request with any body
	AppsPostAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPostAppResponse, error)

	AppsPostAppWithResponse(ctx context.Context, body AppsPostAppJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPostAppResponse, error)

	// AppsGetApp request
	AppsGetAppWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AppsGetAppResponse, error)

	// AppsPutApp request with any body
	AppsPutAppWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPutAppResponse, error)

	AppsPutAppWithResponse(ctx context.Context, appId string, body AppsPutAppJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPutAppResponse, error)

	// AppsPostContributor request with any body
	AppsPostContributorWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPostContributorResponse, error)

	AppsPostContributorWithResponse(ctx context.Context, appId string, body AppsPostContributorJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPostContributorResponse, error)

	// AppsDeleteContributor request
	AppsDeleteContributorWithResponse(ctx context.Context, appId string, contributorId string, reqEditors ...RequestEditorFn) (*AppsDeleteContributorResponse, error)

	// EmailTemplatesGetTemplates request
	EmailTemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *EmailTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*EmailTemplatesGetTemplatesResponse, error)

	// EmailTemplatesPostTemplate request with any body
	EmailTemplatesPostTemplateWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateResponse, error)

	EmailTemplatesPostTemplateWithResponse(ctx context.Context, appId string, body EmailTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateResponse, error)

	// EmailTemplatePreviewPostPreview request with any body
	EmailTemplatePreviewPostPreviewWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatePreviewPostPreviewResponse, error)

	EmailTemplatePreviewPostPreviewWithResponse(ctx context.Context, appId string, body EmailTemplatePreviewPostPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatePreviewPostPreviewResponse, error)

	// EmailTemplatesDeleteTemplate request
	EmailTemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*EmailTemplatesDeleteTemplateResponse, error)

	// EmailTemplatesPostTemplateLanguage request with any body
	EmailTemplatesPostTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateLanguageResponse, error)

	EmailTemplatesPostTemplateLanguageWithResponse(ctx context.Context, appId string, code string, body EmailTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateLanguageResponse, error)

	// EmailTemplatesPutTemplate request with any body
	EmailTemplatesPutTemplateWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateResponse, error)

	EmailTemplatesPutTemplateWithResponse(ctx context.Context, appId string, code string, body EmailTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateResponse, error)

	// EmailTemplatesDeleteTemplateLanguage request
	EmailTemplatesDeleteTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*EmailTemplatesDeleteTemplateLanguageResponse, error)

	// EmailTemplatesPutTemplateLanguage request with any body
	EmailTemplatesPutTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateLanguageResponse, error)

	EmailTemplatesPutTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, body EmailTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateLanguageResponse, error)

	// EmailTemplatesGetTemplate request
	EmailTemplatesGetTemplateWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*EmailTemplatesGetTemplateResponse, error)

	// EmailTemplatePreviewGetPreview request
	EmailTemplatePreviewGetPreviewWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*EmailTemplatePreviewGetPreviewResponse, error)

	// EventsGetEvents request
	EventsGetEventsWithResponse(ctx context.Context, appId string, params *EventsGetEventsParams, reqEditors ...RequestEditorFn) (*EventsGetEventsResponse, error)

	// EventsPostEvents request with any body
	EventsPostEventsWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsPostEventsResponse, error)

	EventsPostEventsWithResponse(ctx context.Context, appId string, body EventsPostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsPostEventsResponse, error)

	// AppsPostIntegration request with any body
	AppsPostIntegrationWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPostIntegrationResponse, error)

	AppsPostIntegrationWithResponse(ctx context.Context, appId string, body AppsPostIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPostIntegrationResponse, error)

	// AppsGetIntegrations request
	AppsGetIntegrationsWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AppsGetIntegrationsResponse, error)

	// AppsDeleteIntegration request
	AppsDeleteIntegrationWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*AppsDeleteIntegrationResponse, error)

	// AppsPutIntegration request with any body
	AppsPutIntegrationWithBodyWithResponse(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPutIntegrationResponse, error)

	AppsPutIntegrationWithResponse(ctx context.Context, appId string, id string, body AppsPutIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPutIntegrationResponse, error)

	// LogsGetLogs request
	LogsGetLogsWithResponse(ctx context.Context, appId string, params *LogsGetLogsParams, reqEditors ...RequestEditorFn) (*LogsGetLogsResponse, error)

	// MediaGetMedias request
	MediaGetMediasWithResponse(ctx context.Context, appId string, params *MediaGetMediasParams, reqEditors ...RequestEditorFn) (*MediaGetMediasResponse, error)

	// MediaUpload request with any body
	MediaUploadWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MediaUploadResponse, error)

	// MediaDelete request
	MediaDeleteWithResponse(ctx context.Context, appId string, fileName string, reqEditors ...RequestEditorFn) (*MediaDeleteResponse, error)

	// MediaDownload request
	MediaDownloadWithResponse(ctx context.Context, appId string, fileName string, params *MediaDownloadParams, reqEditors ...RequestEditorFn) (*MediaDownloadResponse, error)

	// MessagingTemplatesGetTemplates request
	MessagingTemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *MessagingTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*MessagingTemplatesGetTemplatesResponse, error)

	// MessagingTemplatesPostTemplate request with any body
	MessagingTemplatesPostTemplateWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateResponse, error)

	MessagingTemplatesPostTemplateWithResponse(ctx context.Context, appId string, body MessagingTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateResponse, error)

	// MessagingTemplatesDeleteTemplate request
	MessagingTemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*MessagingTemplatesDeleteTemplateResponse, error)

	// MessagingTemplatesPostTemplateLanguage request with any body
	MessagingTemplatesPostTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateLanguageResponse, error)

	MessagingTemplatesPostTemplateLanguageWithResponse(ctx context.Context, appId string, code string, body MessagingTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateLanguageResponse, error)

	// MessagingTemplatesPutTemplate request with any body
	MessagingTemplatesPutTemplateWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateResponse, error)

	MessagingTemplatesPutTemplateWithResponse(ctx context.Context, appId string, code string, body MessagingTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateResponse, error)

	// MessagingTemplatesDeleteTemplateLanguage request
	MessagingTemplatesDeleteTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*MessagingTemplatesDeleteTemplateLanguageResponse, error)

	// MessagingTemplatesPutTemplateLanguage request with any body
	MessagingTemplatesPutTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateLanguageResponse, error)

	MessagingTemplatesPutTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, body MessagingTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateLanguageResponse, error)

	// MessagingTemplatesGetTemplate request
	MessagingTemplatesGetTemplateWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*MessagingTemplatesGetTemplateResponse, error)

	// NotificationsGetAllNotifications request
	NotificationsGetAllNotificationsWithResponse(ctx context.Context, appId string, params *NotificationsGetAllNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetAllNotificationsResponse, error)

	// SmsTemplatesGetTemplates request
	SmsTemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *SmsTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*SmsTemplatesGetTemplatesResponse, error)

	// SmsTemplatesPostTemplate request with any body
	SmsTemplatesPostTemplateWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateResponse, error)

	SmsTemplatesPostTemplateWithResponse(ctx context.Context, appId string, body SmsTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateResponse, error)

	// SmsTemplatesDeleteTemplate request
	SmsTemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*SmsTemplatesDeleteTemplateResponse, error)

	// SmsTemplatesPostTemplateLanguage request with any body
	SmsTemplatesPostTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateLanguageResponse, error)

	SmsTemplatesPostTemplateLanguageWithResponse(ctx context.Context, appId string, code string, body SmsTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateLanguageResponse, error)

	// SmsTemplatesPutTemplate request with any body
	SmsTemplatesPutTemplateWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateResponse, error)

	SmsTemplatesPutTemplateWithResponse(ctx context.Context, appId string, code string, body SmsTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateResponse, error)

	// SmsTemplatesDeleteTemplateLanguage request
	SmsTemplatesDeleteTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*SmsTemplatesDeleteTemplateLanguageResponse, error)

	// SmsTemplatesPutTemplateLanguage request with any body
	SmsTemplatesPutTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateLanguageResponse, error)

	SmsTemplatesPutTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, body SmsTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateLanguageResponse, error)

	// SmsTemplatesGetTemplate request
	SmsTemplatesGetTemplateWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*SmsTemplatesGetTemplateResponse, error)

	// TemplatesGetTemplates request
	TemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *TemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*TemplatesGetTemplatesResponse, error)

	// TemplatesPostTemplates request with any body
	TemplatesPostTemplatesWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TemplatesPostTemplatesResponse, error)

	TemplatesPostTemplatesWithResponse(ctx context.Context, appId string, body TemplatesPostTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*TemplatesPostTemplatesResponse, error)

	// TemplatesDeleteTemplate request
	TemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*TemplatesDeleteTemplateResponse, error)

	// TopicsGetTopics request
	TopicsGetTopicsWithResponse(ctx context.Context, appId string, params *TopicsGetTopicsParams, reqEditors ...RequestEditorFn) (*TopicsGetTopicsResponse, error)

	// TopicsPostTopics request with any body
	TopicsPostTopicsWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TopicsPostTopicsResponse, error)

	TopicsPostTopicsWithResponse(ctx context.Context, appId string, body TopicsPostTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*TopicsPostTopicsResponse, error)

	// TopicsDeleteTopic request
	TopicsDeleteTopicWithResponse(ctx context.Context, appId string, path string, reqEditors ...RequestEditorFn) (*TopicsDeleteTopicResponse, error)

	// UsersGetUsers request
	UsersGetUsersWithResponse(ctx context.Context, appId string, params *UsersGetUsersParams, reqEditors ...RequestEditorFn) (*UsersGetUsersResponse, error)

	// UsersPostUsers request with any body
	UsersPostUsersWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPostUsersResponse, error)

	UsersPostUsersWithResponse(ctx context.Context, appId string, body UsersPostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPostUsersResponse, error)

	// UsersDeleteUser request
	UsersDeleteUserWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*UsersDeleteUserResponse, error)

	// UsersGetUser request
	UsersGetUserWithResponse(ctx context.Context, appId string, id string, params *UsersGetUserParams, reqEditors ...RequestEditorFn) (*UsersGetUserResponse, error)

	// UsersPostAllowedTopic request with any body
	UsersPostAllowedTopicWithBodyWithResponse(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPostAllowedTopicResponse, error)

	UsersPostAllowedTopicWithResponse(ctx context.Context, appId string, id string, body UsersPostAllowedTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPostAllowedTopicResponse, error)

	// UsersDeleteAllowedTopic request
	UsersDeleteAllowedTopicWithResponse(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*UsersDeleteAllowedTopicResponse, error)

	// UsersDeleteMobilePushToken request
	UsersDeleteMobilePushTokenWithResponse(ctx context.Context, appId string, id string, token string, reqEditors ...RequestEditorFn) (*UsersDeleteMobilePushTokenResponse, error)

	// NotificationsGetNotifications request
	NotificationsGetNotificationsWithResponse(ctx context.Context, appId string, id string, params *NotificationsGetNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetNotificationsResponse, error)

	// UsersGetSubscriptions request
	UsersGetSubscriptionsWithResponse(ctx context.Context, appId string, id string, params *UsersGetSubscriptionsParams, reqEditors ...RequestEditorFn) (*UsersGetSubscriptionsResponse, error)

	// UsersPostSubscriptions request with any body
	UsersPostSubscriptionsWithBodyWithResponse(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPostSubscriptionsResponse, error)

	UsersPostSubscriptionsWithResponse(ctx context.Context, appId string, id string, body UsersPostSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPostSubscriptionsResponse, error)

	// UsersDeleteSubscription request
	UsersDeleteSubscriptionWithResponse(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*UsersDeleteSubscriptionResponse, error)

	// UsersDeleteWebPushSubscription request
	UsersDeleteWebPushSubscriptionWithResponse(ctx context.Context, appId string, id string, endpoint string, reqEditors ...RequestEditorFn) (*UsersDeleteWebPushSubscriptionResponse, error)

	// MediaDownload2 request
	MediaDownload2WithResponse(ctx context.Context, appId string, fileName string, params *MediaDownload2Params, reqEditors ...RequestEditorFn) (*MediaDownload2Response, error)

	// MediaProxyProxyImage request
	MediaProxyProxyImageWithResponse(ctx context.Context, params *MediaProxyProxyImageParams, reqEditors ...RequestEditorFn) (*MediaProxyProxyImageResponse, error)

	// MediaDownload3 request
	MediaDownload3WithResponse(ctx context.Context, appId string, fileName string, params *MediaDownload3Params, reqEditors ...RequestEditorFn) (*MediaDownload3Response, error)

	// DiagnosticsGetDump request
	DiagnosticsGetDumpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DiagnosticsGetDumpResponse, error)

	// DiagnosticsGetGCDump request
	DiagnosticsGetGCDumpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DiagnosticsGetGCDumpResponse, error)

	// ConfigsGetLanguages request
	ConfigsGetLanguagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigsGetLanguagesResponse, error)

	// UserGetUser request
	UserGetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetUserResponse, error)

	// UserPostUser request with any body
	UserPostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserPostUserResponse, error)

	UserPostUserWithResponse(ctx context.Context, body UserPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UserPostUserResponse, error)

	// UserGetAdminUser request
	UserGetAdminUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetAdminUserResponse, error)

	// EventsPostMyEvents request with any body
	EventsPostMyEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsPostMyEventsResponse, error)

	EventsPostMyEventsWithResponse(ctx context.Context, body EventsPostMyEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsPostMyEventsResponse, error)

	// MobilePushGetMyToken request
	MobilePushGetMyTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MobilePushGetMyTokenResponse, error)

	// MobilePushPostMyToken request with any body
	MobilePushPostMyTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MobilePushPostMyTokenResponse, error)

	MobilePushPostMyTokenWithResponse(ctx context.Context, body MobilePushPostMyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*MobilePushPostMyTokenResponse, error)

	// MobilePushDeleteMyToken request
	MobilePushDeleteMyTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*MobilePushDeleteMyTokenResponse, error)

	// NotificationsGetMyNotifications request
	NotificationsGetMyNotificationsWithResponse(ctx context.Context, params *NotificationsGetMyNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetMyNotificationsResponse, error)

	// NotificationsGetMyArchive request
	NotificationsGetMyArchiveWithResponse(ctx context.Context, params *NotificationsGetMyArchiveParams, reqEditors ...RequestEditorFn) (*NotificationsGetMyArchiveResponse, error)

	// NotificationsGetMyDeviceNotifications request
	NotificationsGetMyDeviceNotificationsWithResponse(ctx context.Context, params *NotificationsGetMyDeviceNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetMyDeviceNotificationsResponse, error)

	// NotificationsConfirmMe request with any body
	NotificationsConfirmMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsConfirmMeResponse, error)

	NotificationsConfirmMeWithResponse(ctx context.Context, body NotificationsConfirmMeJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsConfirmMeResponse, error)

	// UserGetMySubscriptions request
	UserGetMySubscriptionsWithResponse(ctx context.Context, params *UserGetMySubscriptionsParams, reqEditors ...RequestEditorFn) (*UserGetMySubscriptionsResponse, error)

	// UserPostMySubscriptions request with any body
	UserPostMySubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserPostMySubscriptionsResponse, error)

	UserPostMySubscriptionsWithResponse(ctx context.Context, body UserPostMySubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UserPostMySubscriptionsResponse, error)

	// UserDeleteSubscription request
	UserDeleteSubscriptionWithResponse(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*UserDeleteSubscriptionResponse, error)

	// UserGetMySubscription request
	UserGetMySubscriptionWithResponse(ctx context.Context, topic string, reqEditors ...RequestEditorFn) (*UserGetMySubscriptionResponse, error)

	// UserGetTopics request
	UserGetTopicsWithResponse(ctx context.Context, params *UserGetTopicsParams, reqEditors ...RequestEditorFn) (*UserGetTopicsResponse, error)

	// SystemUsersGetUsers request
	SystemUsersGetUsersWithResponse(ctx context.Context, params *SystemUsersGetUsersParams, reqEditors ...RequestEditorFn) (*SystemUsersGetUsersResponse, error)

	// SystemUsersPostUser request with any body
	SystemUsersPostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemUsersPostUserResponse, error)

	SystemUsersPostUserWithResponse(ctx context.Context, body SystemUsersPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemUsersPostUserResponse, error)

	// SystemUsersDeleteUser request
	SystemUsersDeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersDeleteUserResponse, error)

	// SystemUsersGetUser request
	SystemUsersGetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersGetUserResponse, error)

	// SystemUsersPutUser request with any body
	SystemUsersPutUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemUsersPutUserResponse, error)

	SystemUsersPutUserWithResponse(ctx context.Context, id string, body SystemUsersPutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemUsersPutUserResponse, error)

	// SystemUsersLockUser request
	SystemUsersLockUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersLockUserResponse, error)

	// SystemUsersUnlockUser request
	SystemUsersUnlockUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersUnlockUserResponse, error)

	// ConfigsGetTimezones request
	ConfigsGetTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigsGetTimezonesResponse, error)

	// PingGetPing request
	PingGetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingGetPingResponse, error)
}

type AppsGetAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsGetAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsGetAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPostAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsPostAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPostAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsGetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDetailsDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsGetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsGetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPutAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDetailsDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsPutAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPutAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPostContributorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDetailsDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsPostContributorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPostContributorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsDeleteContributorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDetailsDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsDeleteContributorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsDeleteContributorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesGetTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfChannelTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesGetTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesGetTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesPostTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTemplateDetailsDtoOfEmailTemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesPostTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesPostTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatePreviewPostPreviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailPreviewDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatePreviewPostPreviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatePreviewPostPreviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesDeleteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesDeleteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesDeleteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesPostTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailTemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesPostTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesPostTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesPutTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesPutTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesPutTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesDeleteTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesDeleteTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesDeleteTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesPutTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesPutTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesPutTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatesGetTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTemplateDetailsDtoOfEmailTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatesGetTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatesGetTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmailTemplatePreviewGetPreviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EmailTemplatePreviewGetPreviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmailTemplatePreviewGetPreviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsGetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfEventDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EventsGetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsGetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsPostEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EventsPostEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsPostEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPostIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationCreatedDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsPostIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPostIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsGetIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfiguredIntegrationsDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsGetIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsGetIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsDeleteIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsDeleteIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsDeleteIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPutIntegrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r AppsPutIntegrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPutIntegrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogsGetLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfLogEntryDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r LogsGetLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogsGetLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaGetMediasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfMediaDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaGetMediasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaGetMediasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesGetTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfChannelTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesGetTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesGetTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesPostTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTemplateDetailsDtoOfMessagingTemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesPostTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesPostTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesDeleteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesDeleteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesDeleteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesPostTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessagingTemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesPostTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesPostTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesPutTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesPutTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesPutTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesDeleteTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesDeleteTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesDeleteTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesPutTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesPutTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesPutTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MessagingTemplatesGetTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTemplateDetailsDtoOfMessagingTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MessagingTemplatesGetTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MessagingTemplatesGetTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsGetAllNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfUserNotificationDetailsDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r NotificationsGetAllNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsGetAllNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesGetTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfChannelTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesGetTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesGetTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesPostTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTemplateDetailsDtoOfSmsTemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesPostTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesPostTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesDeleteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesDeleteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesDeleteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesPostTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmsTemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesPostTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesPostTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesPutTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesPutTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesPutTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesDeleteTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesDeleteTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesDeleteTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesPutTemplateLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesPutTemplateLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesPutTemplateLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmsTemplatesGetTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTemplateDetailsDtoOfSmsTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SmsTemplatesGetTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmsTemplatesGetTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TemplatesGetTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfTemplateDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r TemplatesGetTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TemplatesGetTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TemplatesPostTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TemplateDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r TemplatesPostTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TemplatesPostTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TemplatesDeleteTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r TemplatesDeleteTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TemplatesDeleteTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TopicsGetTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfTopicDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r TopicsGetTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TopicsGetTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TopicsPostTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TopicDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r TopicsPostTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TopicsPostTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TopicsDeleteTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r TopicsDeleteTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TopicsDeleteTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfUserDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersGetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersPostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPostAllowedTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersPostAllowedTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPostAllowedTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteAllowedTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersDeleteAllowedTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteAllowedTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteMobilePushTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersDeleteMobilePushTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteMobilePushTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsGetNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfUserNotificationDetailsDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r NotificationsGetNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsGetNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfSubscriptionDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersGetSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersPostSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersPostSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersPostSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersDeleteSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteWebPushSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UsersDeleteWebPushSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteWebPushSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaDownload2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaDownload2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaDownload2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaProxyProxyImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaProxyProxyImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaProxyProxyImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MediaDownload3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MediaDownload3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MediaDownload3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiagnosticsGetDumpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
	JSON501      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r DiagnosticsGetDumpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiagnosticsGetDumpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiagnosticsGetGCDumpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
	JSON501      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r DiagnosticsGetGCDumpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiagnosticsGetGCDumpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigsGetLanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r ConfigsGetLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigsGetLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserPostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserPostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserPostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetAdminUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminProfileDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserGetAdminUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetAdminUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EventsPostMyEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r EventsPostMyEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EventsPostMyEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MobilePushGetMyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfMobilePushTokenDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MobilePushGetMyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MobilePushGetMyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MobilePushPostMyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MobilePushPostMyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MobilePushPostMyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MobilePushDeleteMyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r MobilePushDeleteMyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MobilePushDeleteMyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsGetMyNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfUserNotificationDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r NotificationsGetMyNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsGetMyNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsGetMyArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfUserNotificationDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r NotificationsGetMyArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsGetMyArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsGetMyDeviceNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfUserNotificationDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r NotificationsGetMyDeviceNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsGetMyDeviceNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotificationsConfirmMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r NotificationsConfirmMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationsConfirmMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetMySubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfSubscriptionDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserGetMySubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetMySubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserPostMySubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserPostMySubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserPostMySubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserDeleteSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserDeleteSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserDeleteSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetMySubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserGetMySubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetMySubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetTopicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserTopicDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r UserGetTopicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetTopicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersGetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseDtoOfSystemUserDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersGetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersGetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersPostUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SystemUserDto
	JSON400      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersPostUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersPostUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersDeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorDto
	JSON403      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemUserDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersPutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemUserDto
	JSON400      *ErrorDto
	JSON403      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersPutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersPutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersLockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemUserDto
	JSON400      *ErrorDto
	JSON403      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersLockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersLockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemUsersUnlockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemUserDto
	JSON400      *ErrorDto
	JSON403      *ErrorDto
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r SystemUsersUnlockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemUsersUnlockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfigsGetTimezonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r ConfigsGetTimezonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigsGetTimezonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PingGetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorDto
}

// Status returns HTTPResponse.Status
func (r PingGetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingGetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AppsGetAppsWithResponse request returning *AppsGetAppsResponse
func (c *ClientWithResponses) AppsGetAppsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AppsGetAppsResponse, error) {
	rsp, err := c.AppsGetApps(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsGetAppsResponse(rsp)
}

// AppsPostAppWithBodyWithResponse request with arbitrary body returning *AppsPostAppResponse
func (c *ClientWithResponses) AppsPostAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPostAppResponse, error) {
	rsp, err := c.AppsPostAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPostAppResponse(rsp)
}

func (c *ClientWithResponses) AppsPostAppWithResponse(ctx context.Context, body AppsPostAppJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPostAppResponse, error) {
	rsp, err := c.AppsPostApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPostAppResponse(rsp)
}

// AppsGetAppWithResponse request returning *AppsGetAppResponse
func (c *ClientWithResponses) AppsGetAppWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AppsGetAppResponse, error) {
	rsp, err := c.AppsGetApp(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsGetAppResponse(rsp)
}

// AppsPutAppWithBodyWithResponse request with arbitrary body returning *AppsPutAppResponse
func (c *ClientWithResponses) AppsPutAppWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPutAppResponse, error) {
	rsp, err := c.AppsPutAppWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPutAppResponse(rsp)
}

func (c *ClientWithResponses) AppsPutAppWithResponse(ctx context.Context, appId string, body AppsPutAppJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPutAppResponse, error) {
	rsp, err := c.AppsPutApp(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPutAppResponse(rsp)
}

// AppsPostContributorWithBodyWithResponse request with arbitrary body returning *AppsPostContributorResponse
func (c *ClientWithResponses) AppsPostContributorWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPostContributorResponse, error) {
	rsp, err := c.AppsPostContributorWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPostContributorResponse(rsp)
}

func (c *ClientWithResponses) AppsPostContributorWithResponse(ctx context.Context, appId string, body AppsPostContributorJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPostContributorResponse, error) {
	rsp, err := c.AppsPostContributor(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPostContributorResponse(rsp)
}

// AppsDeleteContributorWithResponse request returning *AppsDeleteContributorResponse
func (c *ClientWithResponses) AppsDeleteContributorWithResponse(ctx context.Context, appId string, contributorId string, reqEditors ...RequestEditorFn) (*AppsDeleteContributorResponse, error) {
	rsp, err := c.AppsDeleteContributor(ctx, appId, contributorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsDeleteContributorResponse(rsp)
}

// EmailTemplatesGetTemplatesWithResponse request returning *EmailTemplatesGetTemplatesResponse
func (c *ClientWithResponses) EmailTemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *EmailTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*EmailTemplatesGetTemplatesResponse, error) {
	rsp, err := c.EmailTemplatesGetTemplates(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesGetTemplatesResponse(rsp)
}

// EmailTemplatesPostTemplateWithBodyWithResponse request with arbitrary body returning *EmailTemplatesPostTemplateResponse
func (c *ClientWithResponses) EmailTemplatesPostTemplateWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateResponse, error) {
	rsp, err := c.EmailTemplatesPostTemplateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPostTemplateResponse(rsp)
}

func (c *ClientWithResponses) EmailTemplatesPostTemplateWithResponse(ctx context.Context, appId string, body EmailTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateResponse, error) {
	rsp, err := c.EmailTemplatesPostTemplate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPostTemplateResponse(rsp)
}

// EmailTemplatePreviewPostPreviewWithBodyWithResponse request with arbitrary body returning *EmailTemplatePreviewPostPreviewResponse
func (c *ClientWithResponses) EmailTemplatePreviewPostPreviewWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatePreviewPostPreviewResponse, error) {
	rsp, err := c.EmailTemplatePreviewPostPreviewWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatePreviewPostPreviewResponse(rsp)
}

func (c *ClientWithResponses) EmailTemplatePreviewPostPreviewWithResponse(ctx context.Context, appId string, body EmailTemplatePreviewPostPreviewJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatePreviewPostPreviewResponse, error) {
	rsp, err := c.EmailTemplatePreviewPostPreview(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatePreviewPostPreviewResponse(rsp)
}

// EmailTemplatesDeleteTemplateWithResponse request returning *EmailTemplatesDeleteTemplateResponse
func (c *ClientWithResponses) EmailTemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*EmailTemplatesDeleteTemplateResponse, error) {
	rsp, err := c.EmailTemplatesDeleteTemplate(ctx, appId, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesDeleteTemplateResponse(rsp)
}

// EmailTemplatesPostTemplateLanguageWithBodyWithResponse request with arbitrary body returning *EmailTemplatesPostTemplateLanguageResponse
func (c *ClientWithResponses) EmailTemplatesPostTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateLanguageResponse, error) {
	rsp, err := c.EmailTemplatesPostTemplateLanguageWithBody(ctx, appId, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPostTemplateLanguageResponse(rsp)
}

func (c *ClientWithResponses) EmailTemplatesPostTemplateLanguageWithResponse(ctx context.Context, appId string, code string, body EmailTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPostTemplateLanguageResponse, error) {
	rsp, err := c.EmailTemplatesPostTemplateLanguage(ctx, appId, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPostTemplateLanguageResponse(rsp)
}

// EmailTemplatesPutTemplateWithBodyWithResponse request with arbitrary body returning *EmailTemplatesPutTemplateResponse
func (c *ClientWithResponses) EmailTemplatesPutTemplateWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateResponse, error) {
	rsp, err := c.EmailTemplatesPutTemplateWithBody(ctx, appId, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPutTemplateResponse(rsp)
}

func (c *ClientWithResponses) EmailTemplatesPutTemplateWithResponse(ctx context.Context, appId string, code string, body EmailTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateResponse, error) {
	rsp, err := c.EmailTemplatesPutTemplate(ctx, appId, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPutTemplateResponse(rsp)
}

// EmailTemplatesDeleteTemplateLanguageWithResponse request returning *EmailTemplatesDeleteTemplateLanguageResponse
func (c *ClientWithResponses) EmailTemplatesDeleteTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*EmailTemplatesDeleteTemplateLanguageResponse, error) {
	rsp, err := c.EmailTemplatesDeleteTemplateLanguage(ctx, appId, code, language, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesDeleteTemplateLanguageResponse(rsp)
}

// EmailTemplatesPutTemplateLanguageWithBodyWithResponse request with arbitrary body returning *EmailTemplatesPutTemplateLanguageResponse
func (c *ClientWithResponses) EmailTemplatesPutTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateLanguageResponse, error) {
	rsp, err := c.EmailTemplatesPutTemplateLanguageWithBody(ctx, appId, code, language, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPutTemplateLanguageResponse(rsp)
}

func (c *ClientWithResponses) EmailTemplatesPutTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, body EmailTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*EmailTemplatesPutTemplateLanguageResponse, error) {
	rsp, err := c.EmailTemplatesPutTemplateLanguage(ctx, appId, code, language, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesPutTemplateLanguageResponse(rsp)
}

// EmailTemplatesGetTemplateWithResponse request returning *EmailTemplatesGetTemplateResponse
func (c *ClientWithResponses) EmailTemplatesGetTemplateWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*EmailTemplatesGetTemplateResponse, error) {
	rsp, err := c.EmailTemplatesGetTemplate(ctx, appId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatesGetTemplateResponse(rsp)
}

// EmailTemplatePreviewGetPreviewWithResponse request returning *EmailTemplatePreviewGetPreviewResponse
func (c *ClientWithResponses) EmailTemplatePreviewGetPreviewWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*EmailTemplatePreviewGetPreviewResponse, error) {
	rsp, err := c.EmailTemplatePreviewGetPreview(ctx, appId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmailTemplatePreviewGetPreviewResponse(rsp)
}

// EventsGetEventsWithResponse request returning *EventsGetEventsResponse
func (c *ClientWithResponses) EventsGetEventsWithResponse(ctx context.Context, appId string, params *EventsGetEventsParams, reqEditors ...RequestEditorFn) (*EventsGetEventsResponse, error) {
	rsp, err := c.EventsGetEvents(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsGetEventsResponse(rsp)
}

// EventsPostEventsWithBodyWithResponse request with arbitrary body returning *EventsPostEventsResponse
func (c *ClientWithResponses) EventsPostEventsWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsPostEventsResponse, error) {
	rsp, err := c.EventsPostEventsWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsPostEventsResponse(rsp)
}

func (c *ClientWithResponses) EventsPostEventsWithResponse(ctx context.Context, appId string, body EventsPostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsPostEventsResponse, error) {
	rsp, err := c.EventsPostEvents(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsPostEventsResponse(rsp)
}

// AppsPostIntegrationWithBodyWithResponse request with arbitrary body returning *AppsPostIntegrationResponse
func (c *ClientWithResponses) AppsPostIntegrationWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPostIntegrationResponse, error) {
	rsp, err := c.AppsPostIntegrationWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPostIntegrationResponse(rsp)
}

func (c *ClientWithResponses) AppsPostIntegrationWithResponse(ctx context.Context, appId string, body AppsPostIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPostIntegrationResponse, error) {
	rsp, err := c.AppsPostIntegration(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPostIntegrationResponse(rsp)
}

// AppsGetIntegrationsWithResponse request returning *AppsGetIntegrationsResponse
func (c *ClientWithResponses) AppsGetIntegrationsWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AppsGetIntegrationsResponse, error) {
	rsp, err := c.AppsGetIntegrations(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsGetIntegrationsResponse(rsp)
}

// AppsDeleteIntegrationWithResponse request returning *AppsDeleteIntegrationResponse
func (c *ClientWithResponses) AppsDeleteIntegrationWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*AppsDeleteIntegrationResponse, error) {
	rsp, err := c.AppsDeleteIntegration(ctx, appId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsDeleteIntegrationResponse(rsp)
}

// AppsPutIntegrationWithBodyWithResponse request with arbitrary body returning *AppsPutIntegrationResponse
func (c *ClientWithResponses) AppsPutIntegrationWithBodyWithResponse(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppsPutIntegrationResponse, error) {
	rsp, err := c.AppsPutIntegrationWithBody(ctx, appId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPutIntegrationResponse(rsp)
}

func (c *ClientWithResponses) AppsPutIntegrationWithResponse(ctx context.Context, appId string, id string, body AppsPutIntegrationJSONRequestBody, reqEditors ...RequestEditorFn) (*AppsPutIntegrationResponse, error) {
	rsp, err := c.AppsPutIntegration(ctx, appId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPutIntegrationResponse(rsp)
}

// LogsGetLogsWithResponse request returning *LogsGetLogsResponse
func (c *ClientWithResponses) LogsGetLogsWithResponse(ctx context.Context, appId string, params *LogsGetLogsParams, reqEditors ...RequestEditorFn) (*LogsGetLogsResponse, error) {
	rsp, err := c.LogsGetLogs(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogsGetLogsResponse(rsp)
}

// MediaGetMediasWithResponse request returning *MediaGetMediasResponse
func (c *ClientWithResponses) MediaGetMediasWithResponse(ctx context.Context, appId string, params *MediaGetMediasParams, reqEditors ...RequestEditorFn) (*MediaGetMediasResponse, error) {
	rsp, err := c.MediaGetMedias(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaGetMediasResponse(rsp)
}

// MediaUploadWithBodyWithResponse request with arbitrary body returning *MediaUploadResponse
func (c *ClientWithResponses) MediaUploadWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MediaUploadResponse, error) {
	rsp, err := c.MediaUploadWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaUploadResponse(rsp)
}

// MediaDeleteWithResponse request returning *MediaDeleteResponse
func (c *ClientWithResponses) MediaDeleteWithResponse(ctx context.Context, appId string, fileName string, reqEditors ...RequestEditorFn) (*MediaDeleteResponse, error) {
	rsp, err := c.MediaDelete(ctx, appId, fileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaDeleteResponse(rsp)
}

// MediaDownloadWithResponse request returning *MediaDownloadResponse
func (c *ClientWithResponses) MediaDownloadWithResponse(ctx context.Context, appId string, fileName string, params *MediaDownloadParams, reqEditors ...RequestEditorFn) (*MediaDownloadResponse, error) {
	rsp, err := c.MediaDownload(ctx, appId, fileName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaDownloadResponse(rsp)
}

// MessagingTemplatesGetTemplatesWithResponse request returning *MessagingTemplatesGetTemplatesResponse
func (c *ClientWithResponses) MessagingTemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *MessagingTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*MessagingTemplatesGetTemplatesResponse, error) {
	rsp, err := c.MessagingTemplatesGetTemplates(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesGetTemplatesResponse(rsp)
}

// MessagingTemplatesPostTemplateWithBodyWithResponse request with arbitrary body returning *MessagingTemplatesPostTemplateResponse
func (c *ClientWithResponses) MessagingTemplatesPostTemplateWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateResponse, error) {
	rsp, err := c.MessagingTemplatesPostTemplateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPostTemplateResponse(rsp)
}

func (c *ClientWithResponses) MessagingTemplatesPostTemplateWithResponse(ctx context.Context, appId string, body MessagingTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateResponse, error) {
	rsp, err := c.MessagingTemplatesPostTemplate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPostTemplateResponse(rsp)
}

// MessagingTemplatesDeleteTemplateWithResponse request returning *MessagingTemplatesDeleteTemplateResponse
func (c *ClientWithResponses) MessagingTemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*MessagingTemplatesDeleteTemplateResponse, error) {
	rsp, err := c.MessagingTemplatesDeleteTemplate(ctx, appId, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesDeleteTemplateResponse(rsp)
}

// MessagingTemplatesPostTemplateLanguageWithBodyWithResponse request with arbitrary body returning *MessagingTemplatesPostTemplateLanguageResponse
func (c *ClientWithResponses) MessagingTemplatesPostTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateLanguageResponse, error) {
	rsp, err := c.MessagingTemplatesPostTemplateLanguageWithBody(ctx, appId, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPostTemplateLanguageResponse(rsp)
}

func (c *ClientWithResponses) MessagingTemplatesPostTemplateLanguageWithResponse(ctx context.Context, appId string, code string, body MessagingTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPostTemplateLanguageResponse, error) {
	rsp, err := c.MessagingTemplatesPostTemplateLanguage(ctx, appId, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPostTemplateLanguageResponse(rsp)
}

// MessagingTemplatesPutTemplateWithBodyWithResponse request with arbitrary body returning *MessagingTemplatesPutTemplateResponse
func (c *ClientWithResponses) MessagingTemplatesPutTemplateWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateResponse, error) {
	rsp, err := c.MessagingTemplatesPutTemplateWithBody(ctx, appId, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPutTemplateResponse(rsp)
}

func (c *ClientWithResponses) MessagingTemplatesPutTemplateWithResponse(ctx context.Context, appId string, code string, body MessagingTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateResponse, error) {
	rsp, err := c.MessagingTemplatesPutTemplate(ctx, appId, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPutTemplateResponse(rsp)
}

// MessagingTemplatesDeleteTemplateLanguageWithResponse request returning *MessagingTemplatesDeleteTemplateLanguageResponse
func (c *ClientWithResponses) MessagingTemplatesDeleteTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*MessagingTemplatesDeleteTemplateLanguageResponse, error) {
	rsp, err := c.MessagingTemplatesDeleteTemplateLanguage(ctx, appId, code, language, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesDeleteTemplateLanguageResponse(rsp)
}

// MessagingTemplatesPutTemplateLanguageWithBodyWithResponse request with arbitrary body returning *MessagingTemplatesPutTemplateLanguageResponse
func (c *ClientWithResponses) MessagingTemplatesPutTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateLanguageResponse, error) {
	rsp, err := c.MessagingTemplatesPutTemplateLanguageWithBody(ctx, appId, code, language, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPutTemplateLanguageResponse(rsp)
}

func (c *ClientWithResponses) MessagingTemplatesPutTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, body MessagingTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*MessagingTemplatesPutTemplateLanguageResponse, error) {
	rsp, err := c.MessagingTemplatesPutTemplateLanguage(ctx, appId, code, language, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesPutTemplateLanguageResponse(rsp)
}

// MessagingTemplatesGetTemplateWithResponse request returning *MessagingTemplatesGetTemplateResponse
func (c *ClientWithResponses) MessagingTemplatesGetTemplateWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*MessagingTemplatesGetTemplateResponse, error) {
	rsp, err := c.MessagingTemplatesGetTemplate(ctx, appId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMessagingTemplatesGetTemplateResponse(rsp)
}

// NotificationsGetAllNotificationsWithResponse request returning *NotificationsGetAllNotificationsResponse
func (c *ClientWithResponses) NotificationsGetAllNotificationsWithResponse(ctx context.Context, appId string, params *NotificationsGetAllNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetAllNotificationsResponse, error) {
	rsp, err := c.NotificationsGetAllNotifications(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsGetAllNotificationsResponse(rsp)
}

// SmsTemplatesGetTemplatesWithResponse request returning *SmsTemplatesGetTemplatesResponse
func (c *ClientWithResponses) SmsTemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *SmsTemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*SmsTemplatesGetTemplatesResponse, error) {
	rsp, err := c.SmsTemplatesGetTemplates(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesGetTemplatesResponse(rsp)
}

// SmsTemplatesPostTemplateWithBodyWithResponse request with arbitrary body returning *SmsTemplatesPostTemplateResponse
func (c *ClientWithResponses) SmsTemplatesPostTemplateWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateResponse, error) {
	rsp, err := c.SmsTemplatesPostTemplateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPostTemplateResponse(rsp)
}

func (c *ClientWithResponses) SmsTemplatesPostTemplateWithResponse(ctx context.Context, appId string, body SmsTemplatesPostTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateResponse, error) {
	rsp, err := c.SmsTemplatesPostTemplate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPostTemplateResponse(rsp)
}

// SmsTemplatesDeleteTemplateWithResponse request returning *SmsTemplatesDeleteTemplateResponse
func (c *ClientWithResponses) SmsTemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*SmsTemplatesDeleteTemplateResponse, error) {
	rsp, err := c.SmsTemplatesDeleteTemplate(ctx, appId, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesDeleteTemplateResponse(rsp)
}

// SmsTemplatesPostTemplateLanguageWithBodyWithResponse request with arbitrary body returning *SmsTemplatesPostTemplateLanguageResponse
func (c *ClientWithResponses) SmsTemplatesPostTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateLanguageResponse, error) {
	rsp, err := c.SmsTemplatesPostTemplateLanguageWithBody(ctx, appId, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPostTemplateLanguageResponse(rsp)
}

func (c *ClientWithResponses) SmsTemplatesPostTemplateLanguageWithResponse(ctx context.Context, appId string, code string, body SmsTemplatesPostTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPostTemplateLanguageResponse, error) {
	rsp, err := c.SmsTemplatesPostTemplateLanguage(ctx, appId, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPostTemplateLanguageResponse(rsp)
}

// SmsTemplatesPutTemplateWithBodyWithResponse request with arbitrary body returning *SmsTemplatesPutTemplateResponse
func (c *ClientWithResponses) SmsTemplatesPutTemplateWithBodyWithResponse(ctx context.Context, appId string, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateResponse, error) {
	rsp, err := c.SmsTemplatesPutTemplateWithBody(ctx, appId, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPutTemplateResponse(rsp)
}

func (c *ClientWithResponses) SmsTemplatesPutTemplateWithResponse(ctx context.Context, appId string, code string, body SmsTemplatesPutTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateResponse, error) {
	rsp, err := c.SmsTemplatesPutTemplate(ctx, appId, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPutTemplateResponse(rsp)
}

// SmsTemplatesDeleteTemplateLanguageWithResponse request returning *SmsTemplatesDeleteTemplateLanguageResponse
func (c *ClientWithResponses) SmsTemplatesDeleteTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, reqEditors ...RequestEditorFn) (*SmsTemplatesDeleteTemplateLanguageResponse, error) {
	rsp, err := c.SmsTemplatesDeleteTemplateLanguage(ctx, appId, code, language, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesDeleteTemplateLanguageResponse(rsp)
}

// SmsTemplatesPutTemplateLanguageWithBodyWithResponse request with arbitrary body returning *SmsTemplatesPutTemplateLanguageResponse
func (c *ClientWithResponses) SmsTemplatesPutTemplateLanguageWithBodyWithResponse(ctx context.Context, appId string, code string, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateLanguageResponse, error) {
	rsp, err := c.SmsTemplatesPutTemplateLanguageWithBody(ctx, appId, code, language, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPutTemplateLanguageResponse(rsp)
}

func (c *ClientWithResponses) SmsTemplatesPutTemplateLanguageWithResponse(ctx context.Context, appId string, code string, language string, body SmsTemplatesPutTemplateLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*SmsTemplatesPutTemplateLanguageResponse, error) {
	rsp, err := c.SmsTemplatesPutTemplateLanguage(ctx, appId, code, language, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesPutTemplateLanguageResponse(rsp)
}

// SmsTemplatesGetTemplateWithResponse request returning *SmsTemplatesGetTemplateResponse
func (c *ClientWithResponses) SmsTemplatesGetTemplateWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*SmsTemplatesGetTemplateResponse, error) {
	rsp, err := c.SmsTemplatesGetTemplate(ctx, appId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmsTemplatesGetTemplateResponse(rsp)
}

// TemplatesGetTemplatesWithResponse request returning *TemplatesGetTemplatesResponse
func (c *ClientWithResponses) TemplatesGetTemplatesWithResponse(ctx context.Context, appId string, params *TemplatesGetTemplatesParams, reqEditors ...RequestEditorFn) (*TemplatesGetTemplatesResponse, error) {
	rsp, err := c.TemplatesGetTemplates(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTemplatesGetTemplatesResponse(rsp)
}

// TemplatesPostTemplatesWithBodyWithResponse request with arbitrary body returning *TemplatesPostTemplatesResponse
func (c *ClientWithResponses) TemplatesPostTemplatesWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TemplatesPostTemplatesResponse, error) {
	rsp, err := c.TemplatesPostTemplatesWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTemplatesPostTemplatesResponse(rsp)
}

func (c *ClientWithResponses) TemplatesPostTemplatesWithResponse(ctx context.Context, appId string, body TemplatesPostTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*TemplatesPostTemplatesResponse, error) {
	rsp, err := c.TemplatesPostTemplates(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTemplatesPostTemplatesResponse(rsp)
}

// TemplatesDeleteTemplateWithResponse request returning *TemplatesDeleteTemplateResponse
func (c *ClientWithResponses) TemplatesDeleteTemplateWithResponse(ctx context.Context, appId string, code string, reqEditors ...RequestEditorFn) (*TemplatesDeleteTemplateResponse, error) {
	rsp, err := c.TemplatesDeleteTemplate(ctx, appId, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTemplatesDeleteTemplateResponse(rsp)
}

// TopicsGetTopicsWithResponse request returning *TopicsGetTopicsResponse
func (c *ClientWithResponses) TopicsGetTopicsWithResponse(ctx context.Context, appId string, params *TopicsGetTopicsParams, reqEditors ...RequestEditorFn) (*TopicsGetTopicsResponse, error) {
	rsp, err := c.TopicsGetTopics(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTopicsGetTopicsResponse(rsp)
}

// TopicsPostTopicsWithBodyWithResponse request with arbitrary body returning *TopicsPostTopicsResponse
func (c *ClientWithResponses) TopicsPostTopicsWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TopicsPostTopicsResponse, error) {
	rsp, err := c.TopicsPostTopicsWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTopicsPostTopicsResponse(rsp)
}

func (c *ClientWithResponses) TopicsPostTopicsWithResponse(ctx context.Context, appId string, body TopicsPostTopicsJSONRequestBody, reqEditors ...RequestEditorFn) (*TopicsPostTopicsResponse, error) {
	rsp, err := c.TopicsPostTopics(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTopicsPostTopicsResponse(rsp)
}

// TopicsDeleteTopicWithResponse request returning *TopicsDeleteTopicResponse
func (c *ClientWithResponses) TopicsDeleteTopicWithResponse(ctx context.Context, appId string, path string, reqEditors ...RequestEditorFn) (*TopicsDeleteTopicResponse, error) {
	rsp, err := c.TopicsDeleteTopic(ctx, appId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTopicsDeleteTopicResponse(rsp)
}

// UsersGetUsersWithResponse request returning *UsersGetUsersResponse
func (c *ClientWithResponses) UsersGetUsersWithResponse(ctx context.Context, appId string, params *UsersGetUsersParams, reqEditors ...RequestEditorFn) (*UsersGetUsersResponse, error) {
	rsp, err := c.UsersGetUsers(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetUsersResponse(rsp)
}

// UsersPostUsersWithBodyWithResponse request with arbitrary body returning *UsersPostUsersResponse
func (c *ClientWithResponses) UsersPostUsersWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPostUsersResponse, error) {
	rsp, err := c.UsersPostUsersWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPostUsersResponse(rsp)
}

func (c *ClientWithResponses) UsersPostUsersWithResponse(ctx context.Context, appId string, body UsersPostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPostUsersResponse, error) {
	rsp, err := c.UsersPostUsers(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPostUsersResponse(rsp)
}

// UsersDeleteUserWithResponse request returning *UsersDeleteUserResponse
func (c *ClientWithResponses) UsersDeleteUserWithResponse(ctx context.Context, appId string, id string, reqEditors ...RequestEditorFn) (*UsersDeleteUserResponse, error) {
	rsp, err := c.UsersDeleteUser(ctx, appId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteUserResponse(rsp)
}

// UsersGetUserWithResponse request returning *UsersGetUserResponse
func (c *ClientWithResponses) UsersGetUserWithResponse(ctx context.Context, appId string, id string, params *UsersGetUserParams, reqEditors ...RequestEditorFn) (*UsersGetUserResponse, error) {
	rsp, err := c.UsersGetUser(ctx, appId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetUserResponse(rsp)
}

// UsersPostAllowedTopicWithBodyWithResponse request with arbitrary body returning *UsersPostAllowedTopicResponse
func (c *ClientWithResponses) UsersPostAllowedTopicWithBodyWithResponse(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPostAllowedTopicResponse, error) {
	rsp, err := c.UsersPostAllowedTopicWithBody(ctx, appId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPostAllowedTopicResponse(rsp)
}

func (c *ClientWithResponses) UsersPostAllowedTopicWithResponse(ctx context.Context, appId string, id string, body UsersPostAllowedTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPostAllowedTopicResponse, error) {
	rsp, err := c.UsersPostAllowedTopic(ctx, appId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPostAllowedTopicResponse(rsp)
}

// UsersDeleteAllowedTopicWithResponse request returning *UsersDeleteAllowedTopicResponse
func (c *ClientWithResponses) UsersDeleteAllowedTopicWithResponse(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*UsersDeleteAllowedTopicResponse, error) {
	rsp, err := c.UsersDeleteAllowedTopic(ctx, appId, id, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteAllowedTopicResponse(rsp)
}

// UsersDeleteMobilePushTokenWithResponse request returning *UsersDeleteMobilePushTokenResponse
func (c *ClientWithResponses) UsersDeleteMobilePushTokenWithResponse(ctx context.Context, appId string, id string, token string, reqEditors ...RequestEditorFn) (*UsersDeleteMobilePushTokenResponse, error) {
	rsp, err := c.UsersDeleteMobilePushToken(ctx, appId, id, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteMobilePushTokenResponse(rsp)
}

// NotificationsGetNotificationsWithResponse request returning *NotificationsGetNotificationsResponse
func (c *ClientWithResponses) NotificationsGetNotificationsWithResponse(ctx context.Context, appId string, id string, params *NotificationsGetNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetNotificationsResponse, error) {
	rsp, err := c.NotificationsGetNotifications(ctx, appId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsGetNotificationsResponse(rsp)
}

// UsersGetSubscriptionsWithResponse request returning *UsersGetSubscriptionsResponse
func (c *ClientWithResponses) UsersGetSubscriptionsWithResponse(ctx context.Context, appId string, id string, params *UsersGetSubscriptionsParams, reqEditors ...RequestEditorFn) (*UsersGetSubscriptionsResponse, error) {
	rsp, err := c.UsersGetSubscriptions(ctx, appId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetSubscriptionsResponse(rsp)
}

// UsersPostSubscriptionsWithBodyWithResponse request with arbitrary body returning *UsersPostSubscriptionsResponse
func (c *ClientWithResponses) UsersPostSubscriptionsWithBodyWithResponse(ctx context.Context, appId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersPostSubscriptionsResponse, error) {
	rsp, err := c.UsersPostSubscriptionsWithBody(ctx, appId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPostSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UsersPostSubscriptionsWithResponse(ctx context.Context, appId string, id string, body UsersPostSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersPostSubscriptionsResponse, error) {
	rsp, err := c.UsersPostSubscriptions(ctx, appId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersPostSubscriptionsResponse(rsp)
}

// UsersDeleteSubscriptionWithResponse request returning *UsersDeleteSubscriptionResponse
func (c *ClientWithResponses) UsersDeleteSubscriptionWithResponse(ctx context.Context, appId string, id string, prefix string, reqEditors ...RequestEditorFn) (*UsersDeleteSubscriptionResponse, error) {
	rsp, err := c.UsersDeleteSubscription(ctx, appId, id, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteSubscriptionResponse(rsp)
}

// UsersDeleteWebPushSubscriptionWithResponse request returning *UsersDeleteWebPushSubscriptionResponse
func (c *ClientWithResponses) UsersDeleteWebPushSubscriptionWithResponse(ctx context.Context, appId string, id string, endpoint string, reqEditors ...RequestEditorFn) (*UsersDeleteWebPushSubscriptionResponse, error) {
	rsp, err := c.UsersDeleteWebPushSubscription(ctx, appId, id, endpoint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteWebPushSubscriptionResponse(rsp)
}

// MediaDownload2WithResponse request returning *MediaDownload2Response
func (c *ClientWithResponses) MediaDownload2WithResponse(ctx context.Context, appId string, fileName string, params *MediaDownload2Params, reqEditors ...RequestEditorFn) (*MediaDownload2Response, error) {
	rsp, err := c.MediaDownload2(ctx, appId, fileName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaDownload2Response(rsp)
}

// MediaProxyProxyImageWithResponse request returning *MediaProxyProxyImageResponse
func (c *ClientWithResponses) MediaProxyProxyImageWithResponse(ctx context.Context, params *MediaProxyProxyImageParams, reqEditors ...RequestEditorFn) (*MediaProxyProxyImageResponse, error) {
	rsp, err := c.MediaProxyProxyImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaProxyProxyImageResponse(rsp)
}

// MediaDownload3WithResponse request returning *MediaDownload3Response
func (c *ClientWithResponses) MediaDownload3WithResponse(ctx context.Context, appId string, fileName string, params *MediaDownload3Params, reqEditors ...RequestEditorFn) (*MediaDownload3Response, error) {
	rsp, err := c.MediaDownload3(ctx, appId, fileName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMediaDownload3Response(rsp)
}

// DiagnosticsGetDumpWithResponse request returning *DiagnosticsGetDumpResponse
func (c *ClientWithResponses) DiagnosticsGetDumpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DiagnosticsGetDumpResponse, error) {
	rsp, err := c.DiagnosticsGetDump(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiagnosticsGetDumpResponse(rsp)
}

// DiagnosticsGetGCDumpWithResponse request returning *DiagnosticsGetGCDumpResponse
func (c *ClientWithResponses) DiagnosticsGetGCDumpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DiagnosticsGetGCDumpResponse, error) {
	rsp, err := c.DiagnosticsGetGCDump(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiagnosticsGetGCDumpResponse(rsp)
}

// ConfigsGetLanguagesWithResponse request returning *ConfigsGetLanguagesResponse
func (c *ClientWithResponses) ConfigsGetLanguagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigsGetLanguagesResponse, error) {
	rsp, err := c.ConfigsGetLanguages(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigsGetLanguagesResponse(rsp)
}

// UserGetUserWithResponse request returning *UserGetUserResponse
func (c *ClientWithResponses) UserGetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetUserResponse, error) {
	rsp, err := c.UserGetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetUserResponse(rsp)
}

// UserPostUserWithBodyWithResponse request with arbitrary body returning *UserPostUserResponse
func (c *ClientWithResponses) UserPostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserPostUserResponse, error) {
	rsp, err := c.UserPostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPostUserResponse(rsp)
}

func (c *ClientWithResponses) UserPostUserWithResponse(ctx context.Context, body UserPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UserPostUserResponse, error) {
	rsp, err := c.UserPostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPostUserResponse(rsp)
}

// UserGetAdminUserWithResponse request returning *UserGetAdminUserResponse
func (c *ClientWithResponses) UserGetAdminUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetAdminUserResponse, error) {
	rsp, err := c.UserGetAdminUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetAdminUserResponse(rsp)
}

// EventsPostMyEventsWithBodyWithResponse request with arbitrary body returning *EventsPostMyEventsResponse
func (c *ClientWithResponses) EventsPostMyEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EventsPostMyEventsResponse, error) {
	rsp, err := c.EventsPostMyEventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsPostMyEventsResponse(rsp)
}

func (c *ClientWithResponses) EventsPostMyEventsWithResponse(ctx context.Context, body EventsPostMyEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*EventsPostMyEventsResponse, error) {
	rsp, err := c.EventsPostMyEvents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEventsPostMyEventsResponse(rsp)
}

// MobilePushGetMyTokenWithResponse request returning *MobilePushGetMyTokenResponse
func (c *ClientWithResponses) MobilePushGetMyTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MobilePushGetMyTokenResponse, error) {
	rsp, err := c.MobilePushGetMyToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMobilePushGetMyTokenResponse(rsp)
}

// MobilePushPostMyTokenWithBodyWithResponse request with arbitrary body returning *MobilePushPostMyTokenResponse
func (c *ClientWithResponses) MobilePushPostMyTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MobilePushPostMyTokenResponse, error) {
	rsp, err := c.MobilePushPostMyTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMobilePushPostMyTokenResponse(rsp)
}

func (c *ClientWithResponses) MobilePushPostMyTokenWithResponse(ctx context.Context, body MobilePushPostMyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*MobilePushPostMyTokenResponse, error) {
	rsp, err := c.MobilePushPostMyToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMobilePushPostMyTokenResponse(rsp)
}

// MobilePushDeleteMyTokenWithResponse request returning *MobilePushDeleteMyTokenResponse
func (c *ClientWithResponses) MobilePushDeleteMyTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*MobilePushDeleteMyTokenResponse, error) {
	rsp, err := c.MobilePushDeleteMyToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMobilePushDeleteMyTokenResponse(rsp)
}

// NotificationsGetMyNotificationsWithResponse request returning *NotificationsGetMyNotificationsResponse
func (c *ClientWithResponses) NotificationsGetMyNotificationsWithResponse(ctx context.Context, params *NotificationsGetMyNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetMyNotificationsResponse, error) {
	rsp, err := c.NotificationsGetMyNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsGetMyNotificationsResponse(rsp)
}

// NotificationsGetMyArchiveWithResponse request returning *NotificationsGetMyArchiveResponse
func (c *ClientWithResponses) NotificationsGetMyArchiveWithResponse(ctx context.Context, params *NotificationsGetMyArchiveParams, reqEditors ...RequestEditorFn) (*NotificationsGetMyArchiveResponse, error) {
	rsp, err := c.NotificationsGetMyArchive(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsGetMyArchiveResponse(rsp)
}

// NotificationsGetMyDeviceNotificationsWithResponse request returning *NotificationsGetMyDeviceNotificationsResponse
func (c *ClientWithResponses) NotificationsGetMyDeviceNotificationsWithResponse(ctx context.Context, params *NotificationsGetMyDeviceNotificationsParams, reqEditors ...RequestEditorFn) (*NotificationsGetMyDeviceNotificationsResponse, error) {
	rsp, err := c.NotificationsGetMyDeviceNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsGetMyDeviceNotificationsResponse(rsp)
}

// NotificationsConfirmMeWithBodyWithResponse request with arbitrary body returning *NotificationsConfirmMeResponse
func (c *ClientWithResponses) NotificationsConfirmMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotificationsConfirmMeResponse, error) {
	rsp, err := c.NotificationsConfirmMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsConfirmMeResponse(rsp)
}

func (c *ClientWithResponses) NotificationsConfirmMeWithResponse(ctx context.Context, body NotificationsConfirmMeJSONRequestBody, reqEditors ...RequestEditorFn) (*NotificationsConfirmMeResponse, error) {
	rsp, err := c.NotificationsConfirmMe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotificationsConfirmMeResponse(rsp)
}

// UserGetMySubscriptionsWithResponse request returning *UserGetMySubscriptionsResponse
func (c *ClientWithResponses) UserGetMySubscriptionsWithResponse(ctx context.Context, params *UserGetMySubscriptionsParams, reqEditors ...RequestEditorFn) (*UserGetMySubscriptionsResponse, error) {
	rsp, err := c.UserGetMySubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetMySubscriptionsResponse(rsp)
}

// UserPostMySubscriptionsWithBodyWithResponse request with arbitrary body returning *UserPostMySubscriptionsResponse
func (c *ClientWithResponses) UserPostMySubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserPostMySubscriptionsResponse, error) {
	rsp, err := c.UserPostMySubscriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPostMySubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UserPostMySubscriptionsWithResponse(ctx context.Context, body UserPostMySubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UserPostMySubscriptionsResponse, error) {
	rsp, err := c.UserPostMySubscriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPostMySubscriptionsResponse(rsp)
}

// UserDeleteSubscriptionWithResponse request returning *UserDeleteSubscriptionResponse
func (c *ClientWithResponses) UserDeleteSubscriptionWithResponse(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*UserDeleteSubscriptionResponse, error) {
	rsp, err := c.UserDeleteSubscription(ctx, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserDeleteSubscriptionResponse(rsp)
}

// UserGetMySubscriptionWithResponse request returning *UserGetMySubscriptionResponse
func (c *ClientWithResponses) UserGetMySubscriptionWithResponse(ctx context.Context, topic string, reqEditors ...RequestEditorFn) (*UserGetMySubscriptionResponse, error) {
	rsp, err := c.UserGetMySubscription(ctx, topic, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetMySubscriptionResponse(rsp)
}

// UserGetTopicsWithResponse request returning *UserGetTopicsResponse
func (c *ClientWithResponses) UserGetTopicsWithResponse(ctx context.Context, params *UserGetTopicsParams, reqEditors ...RequestEditorFn) (*UserGetTopicsResponse, error) {
	rsp, err := c.UserGetTopics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetTopicsResponse(rsp)
}

// SystemUsersGetUsersWithResponse request returning *SystemUsersGetUsersResponse
func (c *ClientWithResponses) SystemUsersGetUsersWithResponse(ctx context.Context, params *SystemUsersGetUsersParams, reqEditors ...RequestEditorFn) (*SystemUsersGetUsersResponse, error) {
	rsp, err := c.SystemUsersGetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersGetUsersResponse(rsp)
}

// SystemUsersPostUserWithBodyWithResponse request with arbitrary body returning *SystemUsersPostUserResponse
func (c *ClientWithResponses) SystemUsersPostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemUsersPostUserResponse, error) {
	rsp, err := c.SystemUsersPostUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersPostUserResponse(rsp)
}

func (c *ClientWithResponses) SystemUsersPostUserWithResponse(ctx context.Context, body SystemUsersPostUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemUsersPostUserResponse, error) {
	rsp, err := c.SystemUsersPostUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersPostUserResponse(rsp)
}

// SystemUsersDeleteUserWithResponse request returning *SystemUsersDeleteUserResponse
func (c *ClientWithResponses) SystemUsersDeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersDeleteUserResponse, error) {
	rsp, err := c.SystemUsersDeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersDeleteUserResponse(rsp)
}

// SystemUsersGetUserWithResponse request returning *SystemUsersGetUserResponse
func (c *ClientWithResponses) SystemUsersGetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersGetUserResponse, error) {
	rsp, err := c.SystemUsersGetUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersGetUserResponse(rsp)
}

// SystemUsersPutUserWithBodyWithResponse request with arbitrary body returning *SystemUsersPutUserResponse
func (c *ClientWithResponses) SystemUsersPutUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemUsersPutUserResponse, error) {
	rsp, err := c.SystemUsersPutUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersPutUserResponse(rsp)
}

func (c *ClientWithResponses) SystemUsersPutUserWithResponse(ctx context.Context, id string, body SystemUsersPutUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemUsersPutUserResponse, error) {
	rsp, err := c.SystemUsersPutUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersPutUserResponse(rsp)
}

// SystemUsersLockUserWithResponse request returning *SystemUsersLockUserResponse
func (c *ClientWithResponses) SystemUsersLockUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersLockUserResponse, error) {
	rsp, err := c.SystemUsersLockUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersLockUserResponse(rsp)
}

// SystemUsersUnlockUserWithResponse request returning *SystemUsersUnlockUserResponse
func (c *ClientWithResponses) SystemUsersUnlockUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SystemUsersUnlockUserResponse, error) {
	rsp, err := c.SystemUsersUnlockUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSystemUsersUnlockUserResponse(rsp)
}

// ConfigsGetTimezonesWithResponse request returning *ConfigsGetTimezonesResponse
func (c *ClientWithResponses) ConfigsGetTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ConfigsGetTimezonesResponse, error) {
	rsp, err := c.ConfigsGetTimezones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfigsGetTimezonesResponse(rsp)
}

// PingGetPingWithResponse request returning *PingGetPingResponse
func (c *ClientWithResponses) PingGetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingGetPingResponse, error) {
	rsp, err := c.PingGetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingGetPingResponse(rsp)
}

// ParseAppsGetAppsResponse parses an HTTP response from a AppsGetAppsWithResponse call
func ParseAppsGetAppsResponse(rsp *http.Response) (*AppsGetAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsGetAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsPostAppResponse parses an HTTP response from a AppsPostAppWithResponse call
func ParseAppsPostAppResponse(rsp *http.Response) (*AppsPostAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPostAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsGetAppResponse parses an HTTP response from a AppsGetAppWithResponse call
func ParseAppsGetAppResponse(rsp *http.Response) (*AppsGetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsGetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsPutAppResponse parses an HTTP response from a AppsPutAppWithResponse call
func ParseAppsPutAppResponse(rsp *http.Response) (*AppsPutAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPutAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsPostContributorResponse parses an HTTP response from a AppsPostContributorWithResponse call
func ParseAppsPostContributorResponse(rsp *http.Response) (*AppsPostContributorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPostContributorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsDeleteContributorResponse parses an HTTP response from a AppsDeleteContributorWithResponse call
func ParseAppsDeleteContributorResponse(rsp *http.Response) (*AppsDeleteContributorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsDeleteContributorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesGetTemplatesResponse parses an HTTP response from a EmailTemplatesGetTemplatesWithResponse call
func ParseEmailTemplatesGetTemplatesResponse(rsp *http.Response) (*EmailTemplatesGetTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesGetTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfChannelTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesPostTemplateResponse parses an HTTP response from a EmailTemplatesPostTemplateWithResponse call
func ParseEmailTemplatesPostTemplateResponse(rsp *http.Response) (*EmailTemplatesPostTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesPostTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTemplateDetailsDtoOfEmailTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatePreviewPostPreviewResponse parses an HTTP response from a EmailTemplatePreviewPostPreviewWithResponse call
func ParseEmailTemplatePreviewPostPreviewResponse(rsp *http.Response) (*EmailTemplatePreviewPostPreviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatePreviewPostPreviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailPreviewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesDeleteTemplateResponse parses an HTTP response from a EmailTemplatesDeleteTemplateWithResponse call
func ParseEmailTemplatesDeleteTemplateResponse(rsp *http.Response) (*EmailTemplatesDeleteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesDeleteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesPostTemplateLanguageResponse parses an HTTP response from a EmailTemplatesPostTemplateLanguageWithResponse call
func ParseEmailTemplatesPostTemplateLanguageResponse(rsp *http.Response) (*EmailTemplatesPostTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesPostTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesPutTemplateResponse parses an HTTP response from a EmailTemplatesPutTemplateWithResponse call
func ParseEmailTemplatesPutTemplateResponse(rsp *http.Response) (*EmailTemplatesPutTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesPutTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesDeleteTemplateLanguageResponse parses an HTTP response from a EmailTemplatesDeleteTemplateLanguageWithResponse call
func ParseEmailTemplatesDeleteTemplateLanguageResponse(rsp *http.Response) (*EmailTemplatesDeleteTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesDeleteTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesPutTemplateLanguageResponse parses an HTTP response from a EmailTemplatesPutTemplateLanguageWithResponse call
func ParseEmailTemplatesPutTemplateLanguageResponse(rsp *http.Response) (*EmailTemplatesPutTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesPutTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatesGetTemplateResponse parses an HTTP response from a EmailTemplatesGetTemplateWithResponse call
func ParseEmailTemplatesGetTemplateResponse(rsp *http.Response) (*EmailTemplatesGetTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatesGetTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTemplateDetailsDtoOfEmailTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEmailTemplatePreviewGetPreviewResponse parses an HTTP response from a EmailTemplatePreviewGetPreviewWithResponse call
func ParseEmailTemplatePreviewGetPreviewResponse(rsp *http.Response) (*EmailTemplatePreviewGetPreviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmailTemplatePreviewGetPreviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEventsGetEventsResponse parses an HTTP response from a EventsGetEventsWithResponse call
func ParseEventsGetEventsResponse(rsp *http.Response) (*EventsGetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsGetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfEventDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEventsPostEventsResponse parses an HTTP response from a EventsPostEventsWithResponse call
func ParseEventsPostEventsResponse(rsp *http.Response) (*EventsPostEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsPostEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsPostIntegrationResponse parses an HTTP response from a AppsPostIntegrationWithResponse call
func ParseAppsPostIntegrationResponse(rsp *http.Response) (*AppsPostIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPostIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationCreatedDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsGetIntegrationsResponse parses an HTTP response from a AppsGetIntegrationsWithResponse call
func ParseAppsGetIntegrationsResponse(rsp *http.Response) (*AppsGetIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsGetIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfiguredIntegrationsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsDeleteIntegrationResponse parses an HTTP response from a AppsDeleteIntegrationWithResponse call
func ParseAppsDeleteIntegrationResponse(rsp *http.Response) (*AppsDeleteIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsDeleteIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppsPutIntegrationResponse parses an HTTP response from a AppsPutIntegrationWithResponse call
func ParseAppsPutIntegrationResponse(rsp *http.Response) (*AppsPutIntegrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPutIntegrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLogsGetLogsResponse parses an HTTP response from a LogsGetLogsWithResponse call
func ParseLogsGetLogsResponse(rsp *http.Response) (*LogsGetLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogsGetLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfLogEntryDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaGetMediasResponse parses an HTTP response from a MediaGetMediasWithResponse call
func ParseMediaGetMediasResponse(rsp *http.Response) (*MediaGetMediasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaGetMediasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfMediaDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaUploadResponse parses an HTTP response from a MediaUploadWithResponse call
func ParseMediaUploadResponse(rsp *http.Response) (*MediaUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaDeleteResponse parses an HTTP response from a MediaDeleteWithResponse call
func ParseMediaDeleteResponse(rsp *http.Response) (*MediaDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaDownloadResponse parses an HTTP response from a MediaDownloadWithResponse call
func ParseMediaDownloadResponse(rsp *http.Response) (*MediaDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesGetTemplatesResponse parses an HTTP response from a MessagingTemplatesGetTemplatesWithResponse call
func ParseMessagingTemplatesGetTemplatesResponse(rsp *http.Response) (*MessagingTemplatesGetTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesGetTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfChannelTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesPostTemplateResponse parses an HTTP response from a MessagingTemplatesPostTemplateWithResponse call
func ParseMessagingTemplatesPostTemplateResponse(rsp *http.Response) (*MessagingTemplatesPostTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesPostTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTemplateDetailsDtoOfMessagingTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesDeleteTemplateResponse parses an HTTP response from a MessagingTemplatesDeleteTemplateWithResponse call
func ParseMessagingTemplatesDeleteTemplateResponse(rsp *http.Response) (*MessagingTemplatesDeleteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesDeleteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesPostTemplateLanguageResponse parses an HTTP response from a MessagingTemplatesPostTemplateLanguageWithResponse call
func ParseMessagingTemplatesPostTemplateLanguageResponse(rsp *http.Response) (*MessagingTemplatesPostTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesPostTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessagingTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesPutTemplateResponse parses an HTTP response from a MessagingTemplatesPutTemplateWithResponse call
func ParseMessagingTemplatesPutTemplateResponse(rsp *http.Response) (*MessagingTemplatesPutTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesPutTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesDeleteTemplateLanguageResponse parses an HTTP response from a MessagingTemplatesDeleteTemplateLanguageWithResponse call
func ParseMessagingTemplatesDeleteTemplateLanguageResponse(rsp *http.Response) (*MessagingTemplatesDeleteTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesDeleteTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesPutTemplateLanguageResponse parses an HTTP response from a MessagingTemplatesPutTemplateLanguageWithResponse call
func ParseMessagingTemplatesPutTemplateLanguageResponse(rsp *http.Response) (*MessagingTemplatesPutTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesPutTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMessagingTemplatesGetTemplateResponse parses an HTTP response from a MessagingTemplatesGetTemplateWithResponse call
func ParseMessagingTemplatesGetTemplateResponse(rsp *http.Response) (*MessagingTemplatesGetTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MessagingTemplatesGetTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTemplateDetailsDtoOfMessagingTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNotificationsGetAllNotificationsResponse parses an HTTP response from a NotificationsGetAllNotificationsWithResponse call
func ParseNotificationsGetAllNotificationsResponse(rsp *http.Response) (*NotificationsGetAllNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsGetAllNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfUserNotificationDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesGetTemplatesResponse parses an HTTP response from a SmsTemplatesGetTemplatesWithResponse call
func ParseSmsTemplatesGetTemplatesResponse(rsp *http.Response) (*SmsTemplatesGetTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesGetTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfChannelTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesPostTemplateResponse parses an HTTP response from a SmsTemplatesPostTemplateWithResponse call
func ParseSmsTemplatesPostTemplateResponse(rsp *http.Response) (*SmsTemplatesPostTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesPostTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTemplateDetailsDtoOfSmsTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesDeleteTemplateResponse parses an HTTP response from a SmsTemplatesDeleteTemplateWithResponse call
func ParseSmsTemplatesDeleteTemplateResponse(rsp *http.Response) (*SmsTemplatesDeleteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesDeleteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesPostTemplateLanguageResponse parses an HTTP response from a SmsTemplatesPostTemplateLanguageWithResponse call
func ParseSmsTemplatesPostTemplateLanguageResponse(rsp *http.Response) (*SmsTemplatesPostTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesPostTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesPutTemplateResponse parses an HTTP response from a SmsTemplatesPutTemplateWithResponse call
func ParseSmsTemplatesPutTemplateResponse(rsp *http.Response) (*SmsTemplatesPutTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesPutTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesDeleteTemplateLanguageResponse parses an HTTP response from a SmsTemplatesDeleteTemplateLanguageWithResponse call
func ParseSmsTemplatesDeleteTemplateLanguageResponse(rsp *http.Response) (*SmsTemplatesDeleteTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesDeleteTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesPutTemplateLanguageResponse parses an HTTP response from a SmsTemplatesPutTemplateLanguageWithResponse call
func ParseSmsTemplatesPutTemplateLanguageResponse(rsp *http.Response) (*SmsTemplatesPutTemplateLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesPutTemplateLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSmsTemplatesGetTemplateResponse parses an HTTP response from a SmsTemplatesGetTemplateWithResponse call
func ParseSmsTemplatesGetTemplateResponse(rsp *http.Response) (*SmsTemplatesGetTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmsTemplatesGetTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTemplateDetailsDtoOfSmsTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTemplatesGetTemplatesResponse parses an HTTP response from a TemplatesGetTemplatesWithResponse call
func ParseTemplatesGetTemplatesResponse(rsp *http.Response) (*TemplatesGetTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TemplatesGetTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfTemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTemplatesPostTemplatesResponse parses an HTTP response from a TemplatesPostTemplatesWithResponse call
func ParseTemplatesPostTemplatesResponse(rsp *http.Response) (*TemplatesPostTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TemplatesPostTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TemplateDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTemplatesDeleteTemplateResponse parses an HTTP response from a TemplatesDeleteTemplateWithResponse call
func ParseTemplatesDeleteTemplateResponse(rsp *http.Response) (*TemplatesDeleteTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TemplatesDeleteTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTopicsGetTopicsResponse parses an HTTP response from a TopicsGetTopicsWithResponse call
func ParseTopicsGetTopicsResponse(rsp *http.Response) (*TopicsGetTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TopicsGetTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfTopicDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTopicsPostTopicsResponse parses an HTTP response from a TopicsPostTopicsWithResponse call
func ParseTopicsPostTopicsResponse(rsp *http.Response) (*TopicsPostTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TopicsPostTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopicDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTopicsDeleteTopicResponse parses an HTTP response from a TopicsDeleteTopicWithResponse call
func ParseTopicsDeleteTopicResponse(rsp *http.Response) (*TopicsDeleteTopicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TopicsDeleteTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersGetUsersResponse parses an HTTP response from a UsersGetUsersWithResponse call
func ParseUsersGetUsersResponse(rsp *http.Response) (*UsersGetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersPostUsersResponse parses an HTTP response from a UsersPostUsersWithResponse call
func ParseUsersPostUsersResponse(rsp *http.Response) (*UsersPostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersDeleteUserResponse parses an HTTP response from a UsersDeleteUserWithResponse call
func ParseUsersDeleteUserResponse(rsp *http.Response) (*UsersDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersGetUserResponse parses an HTTP response from a UsersGetUserWithResponse call
func ParseUsersGetUserResponse(rsp *http.Response) (*UsersGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersPostAllowedTopicResponse parses an HTTP response from a UsersPostAllowedTopicWithResponse call
func ParseUsersPostAllowedTopicResponse(rsp *http.Response) (*UsersPostAllowedTopicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPostAllowedTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersDeleteAllowedTopicResponse parses an HTTP response from a UsersDeleteAllowedTopicWithResponse call
func ParseUsersDeleteAllowedTopicResponse(rsp *http.Response) (*UsersDeleteAllowedTopicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteAllowedTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersDeleteMobilePushTokenResponse parses an HTTP response from a UsersDeleteMobilePushTokenWithResponse call
func ParseUsersDeleteMobilePushTokenResponse(rsp *http.Response) (*UsersDeleteMobilePushTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteMobilePushTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNotificationsGetNotificationsResponse parses an HTTP response from a NotificationsGetNotificationsWithResponse call
func ParseNotificationsGetNotificationsResponse(rsp *http.Response) (*NotificationsGetNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsGetNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfUserNotificationDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersGetSubscriptionsResponse parses an HTTP response from a UsersGetSubscriptionsWithResponse call
func ParseUsersGetSubscriptionsResponse(rsp *http.Response) (*UsersGetSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfSubscriptionDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersPostSubscriptionsResponse parses an HTTP response from a UsersPostSubscriptionsWithResponse call
func ParseUsersPostSubscriptionsResponse(rsp *http.Response) (*UsersPostSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersPostSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersDeleteSubscriptionResponse parses an HTTP response from a UsersDeleteSubscriptionWithResponse call
func ParseUsersDeleteSubscriptionResponse(rsp *http.Response) (*UsersDeleteSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUsersDeleteWebPushSubscriptionResponse parses an HTTP response from a UsersDeleteWebPushSubscriptionWithResponse call
func ParseUsersDeleteWebPushSubscriptionResponse(rsp *http.Response) (*UsersDeleteWebPushSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteWebPushSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaDownload2Response parses an HTTP response from a MediaDownload2WithResponse call
func ParseMediaDownload2Response(rsp *http.Response) (*MediaDownload2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaDownload2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaProxyProxyImageResponse parses an HTTP response from a MediaProxyProxyImageWithResponse call
func ParseMediaProxyProxyImageResponse(rsp *http.Response) (*MediaProxyProxyImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaProxyProxyImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMediaDownload3Response parses an HTTP response from a MediaDownload3WithResponse call
func ParseMediaDownload3Response(rsp *http.Response) (*MediaDownload3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MediaDownload3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDiagnosticsGetDumpResponse parses an HTTP response from a DiagnosticsGetDumpWithResponse call
func ParseDiagnosticsGetDumpResponse(rsp *http.Response) (*DiagnosticsGetDumpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiagnosticsGetDumpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDiagnosticsGetGCDumpResponse parses an HTTP response from a DiagnosticsGetGCDumpWithResponse call
func ParseDiagnosticsGetGCDumpResponse(rsp *http.Response) (*DiagnosticsGetGCDumpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiagnosticsGetGCDumpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseConfigsGetLanguagesResponse parses an HTTP response from a ConfigsGetLanguagesWithResponse call
func ParseConfigsGetLanguagesResponse(rsp *http.Response) (*ConfigsGetLanguagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigsGetLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetUserResponse parses an HTTP response from a UserGetUserWithResponse call
func ParseUserGetUserResponse(rsp *http.Response) (*UserGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserPostUserResponse parses an HTTP response from a UserPostUserWithResponse call
func ParseUserPostUserResponse(rsp *http.Response) (*UserPostUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserPostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetAdminUserResponse parses an HTTP response from a UserGetAdminUserWithResponse call
func ParseUserGetAdminUserResponse(rsp *http.Response) (*UserGetAdminUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetAdminUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminProfileDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseEventsPostMyEventsResponse parses an HTTP response from a EventsPostMyEventsWithResponse call
func ParseEventsPostMyEventsResponse(rsp *http.Response) (*EventsPostMyEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EventsPostMyEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMobilePushGetMyTokenResponse parses an HTTP response from a MobilePushGetMyTokenWithResponse call
func ParseMobilePushGetMyTokenResponse(rsp *http.Response) (*MobilePushGetMyTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MobilePushGetMyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfMobilePushTokenDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMobilePushPostMyTokenResponse parses an HTTP response from a MobilePushPostMyTokenWithResponse call
func ParseMobilePushPostMyTokenResponse(rsp *http.Response) (*MobilePushPostMyTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MobilePushPostMyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMobilePushDeleteMyTokenResponse parses an HTTP response from a MobilePushDeleteMyTokenWithResponse call
func ParseMobilePushDeleteMyTokenResponse(rsp *http.Response) (*MobilePushDeleteMyTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MobilePushDeleteMyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNotificationsGetMyNotificationsResponse parses an HTTP response from a NotificationsGetMyNotificationsWithResponse call
func ParseNotificationsGetMyNotificationsResponse(rsp *http.Response) (*NotificationsGetMyNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsGetMyNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfUserNotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNotificationsGetMyArchiveResponse parses an HTTP response from a NotificationsGetMyArchiveWithResponse call
func ParseNotificationsGetMyArchiveResponse(rsp *http.Response) (*NotificationsGetMyArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsGetMyArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfUserNotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNotificationsGetMyDeviceNotificationsResponse parses an HTTP response from a NotificationsGetMyDeviceNotificationsWithResponse call
func ParseNotificationsGetMyDeviceNotificationsResponse(rsp *http.Response) (*NotificationsGetMyDeviceNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsGetMyDeviceNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfUserNotificationDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseNotificationsConfirmMeResponse parses an HTTP response from a NotificationsConfirmMeWithResponse call
func ParseNotificationsConfirmMeResponse(rsp *http.Response) (*NotificationsConfirmMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NotificationsConfirmMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetMySubscriptionsResponse parses an HTTP response from a UserGetMySubscriptionsWithResponse call
func ParseUserGetMySubscriptionsResponse(rsp *http.Response) (*UserGetMySubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetMySubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfSubscriptionDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserPostMySubscriptionsResponse parses an HTTP response from a UserPostMySubscriptionsWithResponse call
func ParseUserPostMySubscriptionsResponse(rsp *http.Response) (*UserPostMySubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserPostMySubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserDeleteSubscriptionResponse parses an HTTP response from a UserDeleteSubscriptionWithResponse call
func ParseUserDeleteSubscriptionResponse(rsp *http.Response) (*UserDeleteSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserDeleteSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetMySubscriptionResponse parses an HTTP response from a UserGetMySubscriptionWithResponse call
func ParseUserGetMySubscriptionResponse(rsp *http.Response) (*UserGetMySubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetMySubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetTopicsResponse parses an HTTP response from a UserGetTopicsWithResponse call
func ParseUserGetTopicsResponse(rsp *http.Response) (*UserGetTopicsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetTopicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserTopicDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersGetUsersResponse parses an HTTP response from a SystemUsersGetUsersWithResponse call
func ParseSystemUsersGetUsersResponse(rsp *http.Response) (*SystemUsersGetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersGetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseDtoOfSystemUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersPostUserResponse parses an HTTP response from a SystemUsersPostUserWithResponse call
func ParseSystemUsersPostUserResponse(rsp *http.Response) (*SystemUsersPostUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersPostUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SystemUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersDeleteUserResponse parses an HTTP response from a SystemUsersDeleteUserWithResponse call
func ParseSystemUsersDeleteUserResponse(rsp *http.Response) (*SystemUsersDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersGetUserResponse parses an HTTP response from a SystemUsersGetUserWithResponse call
func ParseSystemUsersGetUserResponse(rsp *http.Response) (*SystemUsersGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersPutUserResponse parses an HTTP response from a SystemUsersPutUserWithResponse call
func ParseSystemUsersPutUserResponse(rsp *http.Response) (*SystemUsersPutUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersPutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersLockUserResponse parses an HTTP response from a SystemUsersLockUserWithResponse call
func ParseSystemUsersLockUserResponse(rsp *http.Response) (*SystemUsersLockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersLockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSystemUsersUnlockUserResponse parses an HTTP response from a SystemUsersUnlockUserWithResponse call
func ParseSystemUsersUnlockUserResponse(rsp *http.Response) (*SystemUsersUnlockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemUsersUnlockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemUserDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseConfigsGetTimezonesResponse parses an HTTP response from a ConfigsGetTimezonesWithResponse call
func ParseConfigsGetTimezonesResponse(rsp *http.Response) (*ConfigsGetTimezonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfigsGetTimezonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePingGetPingResponse parses an HTTP response from a PingGetPingWithResponse call
func ParsePingGetPingResponse(rsp *http.Response) (*PingGetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingGetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
